#ifndef INCLUDED_COM_SUN_STAR_REFLECTION_XIDLCLASS_HDL
#define INCLUDED_COM_SUN_STAR_REFLECTION_XIDLCLASS_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace reflection { class XIdlMethod; } } } }
namespace com { namespace sun { namespace star { namespace reflection { class XIdlArray; } } } }
namespace com { namespace sun { namespace star { namespace reflection { class XIdlField; } } } }
#include "com/sun/star/uno/TypeClass.hdl"
namespace com { namespace sun { namespace star { namespace reflection { class XIdlClass; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Uik.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace reflection {

class SAL_NO_VTABLE XIdlClass : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlClass > > SAL_CALL getClasses(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlClass > SAL_CALL getClass( const ::rtl::OUString& aName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL equals( const ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlClass >& Type ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isAssignableFrom( const ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlClass >& xType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::TypeClass SAL_CALL getTypeClass(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getName(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Uik SAL_CALL getUik(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlClass > > SAL_CALL getSuperclasses(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlClass > > SAL_CALL getInterfaces(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlClass > SAL_CALL getComponentType(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlField > SAL_CALL getField( const ::rtl::OUString& aName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlField > > SAL_CALL getFields(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlMethod > SAL_CALL getMethod( const ::rtl::OUString& aName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlMethod > > SAL_CALL getMethods(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlArray > SAL_CALL getArray(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL createObject( ::com::sun::star::uno::Any& obj ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlClass >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_REFLECTION_XIDLCLASS_HDL
