#ifndef INCLUDED_COM_SUN_STAR_DATATRANSFER_DND_DRAGGESTUREEVENT_HDL
#define INCLUDED_COM_SUN_STAR_DATATRANSFER_DND_DRAGGESTUREEVENT_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace datatransfer { namespace dnd { class XDragSource; } } } } }
#include "com/sun/star/lang/EventObject.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace datatransfer { namespace dnd {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct DragGestureEvent: public ::com::sun::star::lang::EventObject {
    inline DragGestureEvent() SAL_THROW(());

    inline DragGestureEvent(const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Source_, const ::sal_Int8& DragAction_, const ::sal_Int32& DragOriginX_, const ::sal_Int32& DragOriginY_, const ::com::sun::star::uno::Reference< ::com::sun::star::datatransfer::dnd::XDragSource >& DragSource_, const ::com::sun::star::uno::Any& Event_) SAL_THROW(());

    ::sal_Int8 DragAction CPPU_GCC3_ALIGN(::com::sun::star::lang::EventObject);
    ::sal_Int32 DragOriginX;
    ::sal_Int32 DragOriginY;
    ::com::sun::star::uno::Reference< ::com::sun::star::datatransfer::dnd::XDragSource > DragSource;
    ::com::sun::star::uno::Any Event;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::datatransfer::dnd::DragGestureEvent* );

#endif // INCLUDED_COM_SUN_STAR_DATATRANSFER_DND_DRAGGESTUREEVENT_HDL
