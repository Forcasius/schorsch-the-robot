#ifndef INCLUDED_COM_SUN_STAR_UCB_INTERACTIVELOCKINGLOCKEXPIREDEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_UCB_INTERACTIVELOCKINGLOCKEXPIREDEXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/ucb/InteractiveLockingException.hdl"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace ucb {

class CPPU_GCC_DLLPUBLIC_EXPORT InteractiveLockingLockExpiredException : public ::com::sun::star::ucb::InteractiveLockingException
{
public:
    inline CPPU_GCC_DLLPRIVATE InteractiveLockingLockExpiredException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE InteractiveLockingLockExpiredException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::task::InteractionClassification& Classification_, const ::rtl::OUString& Url_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE InteractiveLockingLockExpiredException(InteractiveLockingLockExpiredException const &);

    inline CPPU_GCC_DLLPRIVATE ~InteractiveLockingLockExpiredException();

    inline CPPU_GCC_DLLPRIVATE InteractiveLockingLockExpiredException & operator =(InteractiveLockingLockExpiredException const &);

};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::ucb::InteractiveLockingLockExpiredException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_UCB_INTERACTIVELOCKINGLOCKEXPIREDEXCEPTION_HDL
