#ifndef INCLUDED_COM_SUN_STAR_UCB_OPENCOMMANDARGUMENT2_HDL
#define INCLUDED_COM_SUN_STAR_UCB_OPENCOMMANDARGUMENT2_HDL

#include "sal/config.h"

#include "com/sun/star/ucb/NumberedSortingInfo.hdl"
#include "com/sun/star/ucb/OpenCommandArgument.hdl"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace ucb {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct OpenCommandArgument2: public ::com::sun::star::ucb::OpenCommandArgument {
    inline OpenCommandArgument2() SAL_THROW(());

    inline OpenCommandArgument2(const ::sal_Int32& Mode_, const ::sal_Int32& Priority_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Sink_, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::Property >& Properties_, const ::com::sun::star::uno::Sequence< ::com::sun::star::ucb::NumberedSortingInfo >& SortingInfo_) SAL_THROW(());

    ::com::sun::star::uno::Sequence< ::com::sun::star::ucb::NumberedSortingInfo > SortingInfo CPPU_GCC3_ALIGN(::com::sun::star::ucb::OpenCommandArgument);
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::ucb::OpenCommandArgument2* );

#endif // INCLUDED_COM_SUN_STAR_UCB_OPENCOMMANDARGUMENT2_HDL
