#ifndef INCLUDED_COM_SUN_STAR_UCB_NAMECLASHRESOLVEREQUEST_HDL
#define INCLUDED_COM_SUN_STAR_UCB_NAMECLASHRESOLVEREQUEST_HDL

#include "sal/config.h"

#include "com/sun/star/task/ClassifiedInteractionRequest.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace ucb {

class CPPU_GCC_DLLPUBLIC_EXPORT NameClashResolveRequest : public ::com::sun::star::task::ClassifiedInteractionRequest
{
public:
    inline CPPU_GCC_DLLPRIVATE NameClashResolveRequest() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE NameClashResolveRequest(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::task::InteractionClassification& Classification_, const ::rtl::OUString& TargetFolderURL_, const ::rtl::OUString& ClashingName_, const ::rtl::OUString& ProposedNewName_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE NameClashResolveRequest(NameClashResolveRequest const &);

    inline CPPU_GCC_DLLPRIVATE ~NameClashResolveRequest();

    inline CPPU_GCC_DLLPRIVATE NameClashResolveRequest & operator =(NameClashResolveRequest const &);

    ::rtl::OUString TargetFolderURL CPPU_GCC3_ALIGN( ::com::sun::star::task::ClassifiedInteractionRequest );
    ::rtl::OUString ClashingName;
    ::rtl::OUString ProposedNewName;
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::ucb::NameClashResolveRequest* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_UCB_NAMECLASHRESOLVEREQUEST_HDL
