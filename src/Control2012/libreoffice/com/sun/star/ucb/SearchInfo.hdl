#ifndef INCLUDED_COM_SUN_STAR_UCB_SEARCHINFO_HDL
#define INCLUDED_COM_SUN_STAR_UCB_SEARCHINFO_HDL

#include "sal/config.h"

#include "com/sun/star/ucb/SearchRecursion.hdl"
#include "com/sun/star/ucb/SearchCriterium.hdl"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace ucb {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct SearchInfo {
    inline SearchInfo() SAL_THROW(());

    inline SearchInfo(const ::com::sun::star::uno::Sequence< ::com::sun::star::ucb::SearchCriterium >& Criteria_, const ::com::sun::star::ucb::SearchRecursion& Recursion_, const ::sal_Bool& IncludeBase_, const ::sal_Bool& RespectFolderViewRestrictions_, const ::sal_Bool& RespectDocViewRestrictions_, const ::sal_Bool& FollowIndirections_) SAL_THROW(());

    ::com::sun::star::uno::Sequence< ::com::sun::star::ucb::SearchCriterium > Criteria;
    ::com::sun::star::ucb::SearchRecursion Recursion;
    ::sal_Bool IncludeBase;
    ::sal_Bool RespectFolderViewRestrictions;
    ::sal_Bool RespectDocViewRestrictions;
    ::sal_Bool FollowIndirections;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::ucb::SearchInfo* );

#endif // INCLUDED_COM_SUN_STAR_UCB_SEARCHINFO_HDL
