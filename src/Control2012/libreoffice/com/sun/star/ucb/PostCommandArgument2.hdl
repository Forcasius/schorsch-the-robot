#ifndef INCLUDED_COM_SUN_STAR_UCB_POSTCOMMANDARGUMENT2_HDL
#define INCLUDED_COM_SUN_STAR_UCB_POSTCOMMANDARGUMENT2_HDL

#include "sal/config.h"

#include "com/sun/star/ucb/PostCommandArgument.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace ucb {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct PostCommandArgument2: public ::com::sun::star::ucb::PostCommandArgument {
    inline PostCommandArgument2() SAL_THROW(());

    inline PostCommandArgument2(const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& Source_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Sink_, const ::rtl::OUString& MediaType_, const ::rtl::OUString& Referer_) SAL_THROW(());

    ::rtl::OUString MediaType CPPU_GCC3_ALIGN(::com::sun::star::ucb::PostCommandArgument);
    ::rtl::OUString Referer;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::ucb::PostCommandArgument2* );

#endif // INCLUDED_COM_SUN_STAR_UCB_POSTCOMMANDARGUMENT2_HDL
