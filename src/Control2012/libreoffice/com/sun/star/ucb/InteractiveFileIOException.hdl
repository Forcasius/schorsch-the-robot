#ifndef INCLUDED_COM_SUN_STAR_UCB_INTERACTIVEFILEIOEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_UCB_INTERACTIVEFILEIOEXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/ucb/InteractiveIOException.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace ucb {

class CPPU_GCC_DLLPUBLIC_EXPORT InteractiveFileIOException : public ::com::sun::star::ucb::InteractiveIOException
{
public:
    inline CPPU_GCC_DLLPRIVATE InteractiveFileIOException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE InteractiveFileIOException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::task::InteractionClassification& Classification_, const ::com::sun::star::ucb::IOErrorCode& Code_, const ::rtl::OUString& FileName_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE InteractiveFileIOException(InteractiveFileIOException const &);

    inline CPPU_GCC_DLLPRIVATE ~InteractiveFileIOException();

    inline CPPU_GCC_DLLPRIVATE InteractiveFileIOException & operator =(InteractiveFileIOException const &);

    ::rtl::OUString FileName CPPU_GCC3_ALIGN( ::com::sun::star::ucb::InteractiveIOException );
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::ucb::InteractiveFileIOException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_UCB_INTERACTIVEFILEIOEXCEPTION_HDL
