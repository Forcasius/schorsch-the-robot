#ifndef INCLUDED_COM_SUN_STAR_UCB_INTERACTIVEAUGMENTEDIOEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_UCB_INTERACTIVEAUGMENTEDIOEXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/ucb/InteractiveIOException.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace ucb {

class CPPU_GCC_DLLPUBLIC_EXPORT InteractiveAugmentedIOException : public ::com::sun::star::ucb::InteractiveIOException
{
public:
    inline CPPU_GCC_DLLPRIVATE InteractiveAugmentedIOException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE InteractiveAugmentedIOException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::task::InteractionClassification& Classification_, const ::com::sun::star::ucb::IOErrorCode& Code_, const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& Arguments_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE InteractiveAugmentedIOException(InteractiveAugmentedIOException const &);

    inline CPPU_GCC_DLLPRIVATE ~InteractiveAugmentedIOException();

    inline CPPU_GCC_DLLPRIVATE InteractiveAugmentedIOException & operator =(InteractiveAugmentedIOException const &);

    ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > Arguments CPPU_GCC3_ALIGN( ::com::sun::star::ucb::InteractiveIOException );
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::ucb::InteractiveAugmentedIOException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_UCB_INTERACTIVEAUGMENTEDIOEXCEPTION_HDL
