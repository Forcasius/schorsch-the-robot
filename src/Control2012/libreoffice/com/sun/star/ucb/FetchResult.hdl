#ifndef INCLUDED_COM_SUN_STAR_UCB_FETCHRESULT_HDL
#define INCLUDED_COM_SUN_STAR_UCB_FETCHRESULT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace ucb {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct FetchResult {
    inline FetchResult() SAL_THROW(());

    inline FetchResult(const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& Rows_, const ::sal_Int32& StartIndex_, const ::sal_Bool& Orientation_, const ::sal_Int16& FetchError_) SAL_THROW(());

    ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > Rows;
    ::sal_Int32 StartIndex;
    ::sal_Bool Orientation;
    ::sal_Int16 FetchError;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::ucb::FetchResult* );

#endif // INCLUDED_COM_SUN_STAR_UCB_FETCHRESULT_HDL
