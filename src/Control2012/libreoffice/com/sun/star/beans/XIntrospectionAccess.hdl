#ifndef INCLUDED_COM_SUN_STAR_BEANS_XINTROSPECTIONACCESS_HDL
#define INCLUDED_COM_SUN_STAR_BEANS_XINTROSPECTIONACCESS_HDL

#include "sal/config.h"

#include "com/sun/star/beans/IllegalTypeException.hdl"
#include "com/sun/star/lang/NoSuchMethodException.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace reflection { class XIdlMethod; } } } }
#include "com/sun/star/container/NoSuchElementException.hdl"
#include "com/sun/star/beans/Property.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "com/sun/star/uno/Type.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace beans {

class SAL_NO_VTABLE XIntrospectionAccess : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::sal_Int32 SAL_CALL getSuppliedMethodConcepts(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getSuppliedPropertyConcepts(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::beans::Property SAL_CALL getProperty( const ::rtl::OUString& aName, ::sal_Int32 nPropertyConcepts ) throw (::com::sun::star::container::NoSuchElementException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL hasProperty( const ::rtl::OUString& aName, ::sal_Int32 nPropertyConcepts ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::beans::Property > SAL_CALL getProperties( ::sal_Int32 nPropertyConcepts ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlMethod > SAL_CALL getMethod( const ::rtl::OUString& aName, ::sal_Int32 nMethodConcepts ) throw (::com::sun::star::lang::NoSuchMethodException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL hasMethod( const ::rtl::OUString& aName, ::sal_Int32 nMethodConcepts ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::reflection::XIdlMethod > > SAL_CALL getMethods( ::sal_Int32 nMethodConcepts ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Type > SAL_CALL getSupportedListeners(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > SAL_CALL queryAdapter( const ::com::sun::star::uno::Type& aInterfaceType ) throw (::com::sun::star::beans::IllegalTypeException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XIntrospectionAccess >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_BEANS_XINTROSPECTIONACCESS_HDL
