#ifndef INCLUDED_COM_SUN_STAR_BEANS_GETDIRECTPROPERTYTOLERANTRESULT_HDL
#define INCLUDED_COM_SUN_STAR_BEANS_GETDIRECTPROPERTYTOLERANTRESULT_HDL

#include "sal/config.h"

#include "com/sun/star/beans/GetPropertyTolerantResult.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace beans {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct GetDirectPropertyTolerantResult: public ::com::sun::star::beans::GetPropertyTolerantResult {
    inline GetDirectPropertyTolerantResult() SAL_THROW(());

    inline GetDirectPropertyTolerantResult(const ::sal_Int16& Result_, const ::com::sun::star::beans::PropertyState& State_, const ::com::sun::star::uno::Any& Value_, const ::rtl::OUString& Name_) SAL_THROW(());

    ::rtl::OUString Name CPPU_GCC3_ALIGN(::com::sun::star::beans::GetPropertyTolerantResult);
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::beans::GetDirectPropertyTolerantResult* );

#endif // INCLUDED_COM_SUN_STAR_BEANS_GETDIRECTPROPERTYTOLERANTRESULT_HDL
