#ifndef INCLUDED_COM_SUN_STAR_EMBED_STATECHANGEINPROGRESSEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_EMBED_STATECHANGEINPROGRESSEXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/embed/WrongStateException.hdl"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace embed {

class CPPU_GCC_DLLPUBLIC_EXPORT StateChangeInProgressException : public ::com::sun::star::embed::WrongStateException
{
public:
    inline CPPU_GCC_DLLPRIVATE StateChangeInProgressException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE StateChangeInProgressException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::sal_Int32& TargetState_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE StateChangeInProgressException(StateChangeInProgressException const &);

    inline CPPU_GCC_DLLPRIVATE ~StateChangeInProgressException();

    inline CPPU_GCC_DLLPRIVATE StateChangeInProgressException & operator =(StateChangeInProgressException const &);

    ::sal_Int32 TargetState CPPU_GCC3_ALIGN( ::com::sun::star::embed::WrongStateException );
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::embed::StateChangeInProgressException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_EMBED_STATECHANGEINPROGRESSEXCEPTION_HDL
