#ifndef INCLUDED_COM_SUN_STAR_SDB_SQLCONTEXT_HDL
#define INCLUDED_COM_SUN_STAR_SDB_SQLCONTEXT_HDL

#include "sal/config.h"

#include "com/sun/star/sdbc/SQLWarning.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace sdb {

class CPPU_GCC_DLLPUBLIC_EXPORT SQLContext : public ::com::sun::star::sdbc::SQLWarning
{
public:
    inline CPPU_GCC_DLLPRIVATE SQLContext() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE SQLContext(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::rtl::OUString& SQLState_, const ::sal_Int32& ErrorCode_, const ::com::sun::star::uno::Any& NextException_, const ::rtl::OUString& Details_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE SQLContext(SQLContext const &);

    inline CPPU_GCC_DLLPRIVATE ~SQLContext();

    inline CPPU_GCC_DLLPRIVATE SQLContext & operator =(SQLContext const &);

    ::rtl::OUString Details CPPU_GCC3_ALIGN( ::com::sun::star::sdbc::SQLWarning );
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::sdb::SQLContext* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SDB_SQLCONTEXT_HDL
