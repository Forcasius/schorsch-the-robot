#ifndef INCLUDED_COM_SUN_STAR_PRESENTATION_XPRESENTATION2_HDL
#define INCLUDED_COM_SUN_STAR_PRESENTATION_XPRESENTATION2_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/beans/XPropertySet.hdl"
namespace com { namespace sun { namespace star { namespace presentation { class XSlideShowController; } } } }
#include "com/sun/star/presentation/XPresentation.hdl"
#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace presentation {

class SAL_NO_VTABLE XPresentation2 : public ::com::sun::star::presentation::XPresentation, public ::com::sun::star::beans::XPropertySet
{
public:

    // Methods
    virtual void SAL_CALL startWithArguments( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& Arguments ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isRunning(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::presentation::XSlideShowController > SAL_CALL getController(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::presentation::XPresentation2 >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_PRESENTATION_XPRESENTATION2_HDL
