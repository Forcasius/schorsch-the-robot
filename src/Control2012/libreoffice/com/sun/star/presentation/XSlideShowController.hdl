#ifndef INCLUDED_COM_SUN_STAR_PRESENTATION_XSLIDESHOWCONTROLLER_HDL
#define INCLUDED_COM_SUN_STAR_PRESENTATION_XSLIDESHOWCONTROLLER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace presentation { class XSlideShow; } } } }
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/lang/IndexOutOfBoundsException.hdl"
namespace com { namespace sun { namespace star { namespace presentation { class XSlideShowListener; } } } }
namespace com { namespace sun { namespace star { namespace drawing { class XDrawPage; } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace presentation {

class SAL_NO_VTABLE XSlideShowController : public ::com::sun::star::uno::XInterface
{
public:

    // Attributes
    virtual ::sal_Bool SAL_CALL getAlwaysOnTop() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setAlwaysOnTop( ::sal_Bool _alwaysontop ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getMouseVisible() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMouseVisible( ::sal_Bool _mousevisible ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getUsePen() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setUsePen( ::sal_Bool _usepen ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getPenColor() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPenColor( ::sal_Int32 _pencolor ) throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual ::sal_Bool SAL_CALL isRunning(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getSlideCount(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage > SAL_CALL getSlideByIndex( ::sal_Int32 Index ) throw (::com::sun::star::lang::IndexOutOfBoundsException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL addSlideShowListener( const ::com::sun::star::uno::Reference< ::com::sun::star::presentation::XSlideShowListener >& Listener ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeSlideShowListener( const ::com::sun::star::uno::Reference< ::com::sun::star::presentation::XSlideShowListener >& Listener ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL gotoNextEffect(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL gotoPreviousEffect(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL gotoFirstSlide(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL gotoNextSlide(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL gotoPreviousSlide(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL gotoLastSlide(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL gotoBookmark( const ::rtl::OUString& Bookmark ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL gotoSlide( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage >& Page ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL gotoSlideIndex( ::sal_Int32 Index ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL stopSound(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL pause(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL resume(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isPaused(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL blankScreen( ::sal_Int32 Color ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL activate(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL deactivate(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isActive(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage > SAL_CALL getCurrentSlide(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getCurrentSlideIndex(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getNextSlideIndex(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isEndless(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isFullScreen(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::presentation::XSlideShow > SAL_CALL getSlideShow(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::presentation::XSlideShowController >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_PRESENTATION_XSLIDESHOWCONTROLLER_HDL
