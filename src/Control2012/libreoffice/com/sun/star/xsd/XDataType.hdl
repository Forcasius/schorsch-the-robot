#ifndef INCLUDED_COM_SUN_STAR_XSD_XDATATYPE_HDL
#define INCLUDED_COM_SUN_STAR_XSD_XDATATYPE_HDL

#include "sal/config.h"

#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/util/VetoException.hdl"
#include "com/sun/star/beans/XPropertySet.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xsd {

class SAL_NO_VTABLE XDataType : public ::com::sun::star::beans::XPropertySet
{
public:

    // Attributes
    virtual ::rtl::OUString SAL_CALL getName() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setName( const ::rtl::OUString& _name ) throw (::com::sun::star::util::VetoException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getPattern() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPattern( const ::rtl::OUString& _pattern ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getWhiteSpaceTreatment() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setWhiteSpaceTreatment( ::sal_Int16 _whitespacetreatment ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getIsBasic() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getTypeClass() throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual ::sal_Bool SAL_CALL validate( const ::rtl::OUString& value ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL explainInvalid( const ::rtl::OUString& value ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xsd::XDataType >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XSD_XDATATYPE_HDL
