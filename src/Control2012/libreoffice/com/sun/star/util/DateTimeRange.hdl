#ifndef INCLUDED_COM_SUN_STAR_UTIL_DATETIMERANGE_HDL
#define INCLUDED_COM_SUN_STAR_UTIL_DATETIMERANGE_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace util {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct DateTimeRange {
    inline DateTimeRange() SAL_THROW(());

    inline DateTimeRange(const ::sal_uInt16& StartHundredthSeconds_, const ::sal_uInt16& StartSeconds_, const ::sal_uInt16& StartMinutes_, const ::sal_uInt16& StartHours_, const ::sal_uInt16& StartDay_, const ::sal_uInt16& StartMonth_, const ::sal_uInt16& StartYear_, const ::sal_uInt16& EndHundredthSeconds_, const ::sal_uInt16& EndSeconds_, const ::sal_uInt16& EndMinutes_, const ::sal_uInt16& EndHours_, const ::sal_uInt16& EndDay_, const ::sal_uInt16& EndMonth_, const ::sal_uInt16& EndYear_) SAL_THROW(());

    ::sal_uInt16 StartHundredthSeconds;
    ::sal_uInt16 StartSeconds;
    ::sal_uInt16 StartMinutes;
    ::sal_uInt16 StartHours;
    ::sal_uInt16 StartDay;
    ::sal_uInt16 StartMonth;
    ::sal_uInt16 StartYear;
    ::sal_uInt16 EndHundredthSeconds;
    ::sal_uInt16 EndSeconds;
    ::sal_uInt16 EndMinutes;
    ::sal_uInt16 EndHours;
    ::sal_uInt16 EndDay;
    ::sal_uInt16 EndMonth;
    ::sal_uInt16 EndYear;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::util::DateTimeRange* );

#endif // INCLUDED_COM_SUN_STAR_UTIL_DATETIMERANGE_HDL
