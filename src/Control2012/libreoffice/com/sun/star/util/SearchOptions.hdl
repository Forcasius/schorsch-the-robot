#ifndef INCLUDED_COM_SUN_STAR_UTIL_SEARCHOPTIONS_HDL
#define INCLUDED_COM_SUN_STAR_UTIL_SEARCHOPTIONS_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/util/SearchAlgorithms.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace util {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct SearchOptions {
    inline SearchOptions() SAL_THROW(());

    inline SearchOptions(const ::com::sun::star::util::SearchAlgorithms& algorithmType_, const ::sal_Int32& searchFlag_, const ::rtl::OUString& searchString_, const ::rtl::OUString& replaceString_, const ::com::sun::star::lang::Locale& Locale_, const ::sal_Int32& changedChars_, const ::sal_Int32& deletedChars_, const ::sal_Int32& insertedChars_, const ::sal_Int32& transliterateFlags_) SAL_THROW(());

    ::com::sun::star::util::SearchAlgorithms algorithmType;
    ::sal_Int32 searchFlag;
    ::rtl::OUString searchString;
    ::rtl::OUString replaceString;
    ::com::sun::star::lang::Locale Locale;
    ::sal_Int32 changedChars;
    ::sal_Int32 deletedChars;
    ::sal_Int32 insertedChars;
    ::sal_Int32 transliterateFlags;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::util::SearchOptions* );

#endif // INCLUDED_COM_SUN_STAR_UTIL_SEARCHOPTIONS_HDL
