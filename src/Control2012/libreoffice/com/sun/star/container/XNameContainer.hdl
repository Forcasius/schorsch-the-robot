#ifndef INCLUDED_COM_SUN_STAR_CONTAINER_XNAMECONTAINER_HDL
#define INCLUDED_COM_SUN_STAR_CONTAINER_XNAMECONTAINER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/container/NoSuchElementException.hdl"
#include "com/sun/star/lang/WrappedTargetException.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/container/ElementExistException.hdl"
#include "com/sun/star/container/XNameReplace.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace container {

class SAL_NO_VTABLE XNameContainer : public ::com::sun::star::container::XNameReplace
{
public:

    // Methods
    virtual void SAL_CALL insertByName( const ::rtl::OUString& aName, const ::com::sun::star::uno::Any& aElement ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeByName( const ::rtl::OUString& Name ) throw (::com::sun::star::container::NoSuchElementException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameContainer >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_CONTAINER_XNAMECONTAINER_HDL
