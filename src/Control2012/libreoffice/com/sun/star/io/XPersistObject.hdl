#ifndef INCLUDED_COM_SUN_STAR_IO_XPERSISTOBJECT_HDL
#define INCLUDED_COM_SUN_STAR_IO_XPERSISTOBJECT_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace io { class XObjectInputStream; } } } }
#include "com/sun/star/io/IOException.hdl"
namespace com { namespace sun { namespace star { namespace io { class XObjectOutputStream; } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace io {

class SAL_NO_VTABLE XPersistObject : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL getServiceName(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL write( const ::com::sun::star::uno::Reference< ::com::sun::star::io::XObjectOutputStream >& OutStream ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL read( const ::com::sun::star::uno::Reference< ::com::sun::star::io::XObjectInputStream >& InStream ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::io::XPersistObject >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_IO_XPERSISTOBJECT_HDL
