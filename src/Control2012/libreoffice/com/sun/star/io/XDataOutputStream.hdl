#ifndef INCLUDED_COM_SUN_STAR_IO_XDATAOUTPUTSTREAM_HDL
#define INCLUDED_COM_SUN_STAR_IO_XDATAOUTPUTSTREAM_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/io/IOException.hdl"
#include "com/sun/star/io/XOutputStream.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace io {

class SAL_NO_VTABLE XDataOutputStream : public ::com::sun::star::io::XOutputStream
{
public:

    // Methods
    virtual void SAL_CALL writeBoolean( ::sal_Bool Value ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL writeByte( ::sal_Int8 Value ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL writeChar( ::sal_Unicode Value ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL writeShort( ::sal_Int16 Value ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL writeLong( ::sal_Int32 Value ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL writeHyper( ::sal_Int64 Value ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL writeFloat( float Value ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL writeDouble( double Value ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL writeUTF( const ::rtl::OUString& Value ) throw (::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::io::XDataOutputStream >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_IO_XDATAOUTPUTSTREAM_HDL
