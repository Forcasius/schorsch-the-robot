#ifndef INCLUDED_COM_SUN_STAR_REPORT_META_XFUNCTIONDESCRIPTION_HDL
#define INCLUDED_COM_SUN_STAR_REPORT_META_XFUNCTIONDESCRIPTION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Exception.hdl"
#include "com/sun/star/lang/DisposedException.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/sheet/FunctionArgument.hdl"
namespace com { namespace sun { namespace star { namespace report { namespace meta { class XFunctionCategory; } } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/beans/XPropertySet.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace report { namespace meta {

class SAL_NO_VTABLE XFunctionDescription : public ::com::sun::star::beans::XPropertySet
{
public:

    // Attributes
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::report::meta::XFunctionCategory > SAL_CALL getCategory() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getName() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getDescription() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getSignature() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::FunctionArgument > SAL_CALL getArguments() throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual ::rtl::OUString SAL_CALL createFormula( const ::com::sun::star::uno::Sequence< ::rtl::OUString >& arguments ) throw (::com::sun::star::lang::DisposedException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::Exception, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::report::meta::XFunctionDescription >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_REPORT_META_XFUNCTIONDESCRIPTION_HDL
