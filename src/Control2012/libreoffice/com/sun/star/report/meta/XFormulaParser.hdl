#ifndef INCLUDED_COM_SUN_STAR_REPORT_META_XFORMULAPARSER_HDL
#define INCLUDED_COM_SUN_STAR_REPORT_META_XFORMULAPARSER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/sheet/FormulaOpCodeMapEntry.hdl"
#include "com/sun/star/beans/XPropertySet.hdl"
#include "com/sun/star/sheet/XFormulaParser.hdl"
#include "com/sun/star/lang/XComponent.hdl"
namespace com { namespace sun { namespace star { namespace sheet { class XFormulaOpCodeMapper; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace report { namespace meta {

class SAL_NO_VTABLE XFormulaParser : public ::com::sun::star::lang::XComponent, public ::com::sun::star::sheet::XFormulaParser, public ::com::sun::star::beans::XPropertySet
{
public:

    // Attributes
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::FormulaOpCodeMapEntry > SAL_CALL getOpCodeMap() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setOpCodeMap( const ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::FormulaOpCodeMapEntry >& _opcodemap ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XFormulaOpCodeMapper > SAL_CALL getFormulaOpCodeMapper() throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::report::meta::XFormulaParser >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_REPORT_META_XFORMULAPARSER_HDL
