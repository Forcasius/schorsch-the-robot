#ifndef INCLUDED_COM_SUN_STAR_REPORT_XREPORTCOMPONENT_HDL
#define INCLUDED_COM_SUN_STAR_REPORT_XREPORTCOMPONENT_HDL

#include "sal/config.h"

#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/beans/PropertyVetoException.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace report { class XSection; } } } }
#include "com/sun/star/drawing/XShape.hdl"
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/container/XChild.hdl"
#include "com/sun/star/beans/XPropertySet.hdl"
#include "com/sun/star/beans/UnknownPropertyException.hdl"
#include "com/sun/star/util/XCloneable.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace report {

class SAL_NO_VTABLE XReportComponent : public ::com::sun::star::util::XCloneable, public ::com::sun::star::container::XChild, public ::com::sun::star::lang::XComponent, public ::com::sun::star::drawing::XShape, public ::com::sun::star::beans::XPropertySet
{
public:

    // Attributes
    virtual ::rtl::OUString SAL_CALL getName() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setName( const ::rtl::OUString& _name ) throw (::com::sun::star::beans::PropertyVetoException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getHeight() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setHeight( ::sal_Int32 _height ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getPositionX() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPositionX( ::sal_Int32 _positionx ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getPositionY() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPositionY( ::sal_Int32 _positiony ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getWidth() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setWidth( ::sal_Int32 _width ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getControlBorder() throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setControlBorder( ::sal_Int16 _controlborder ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getControlBorderColor() throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setControlBorderColor( ::sal_Int32 _controlbordercolor ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getPrintRepeatedValues() throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPrintRepeatedValues( ::sal_Bool _printrepeatedvalues ) throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getMasterFields() throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMasterFields( const ::com::sun::star::uno::Sequence< ::rtl::OUString >& _masterfields ) throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getDetailFields() throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setDetailFields( const ::com::sun::star::uno::Sequence< ::rtl::OUString >& _detailfields ) throw (::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::report::XSection > SAL_CALL getSection() throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::report::XReportComponent >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_REPORT_XREPORTCOMPONENT_HDL
