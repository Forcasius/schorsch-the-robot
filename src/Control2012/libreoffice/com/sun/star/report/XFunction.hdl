#ifndef INCLUDED_COM_SUN_STAR_REPORT_XFUNCTION_HDL
#define INCLUDED_COM_SUN_STAR_REPORT_XFUNCTION_HDL

#include "sal/config.h"

#include "com/sun/star/beans/Optional.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/beans/XPropertySet.hdl"
#include "com/sun/star/container/XChild.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace report {

class SAL_NO_VTABLE XFunction : public ::com::sun::star::beans::XPropertySet, public ::com::sun::star::lang::XComponent, public ::com::sun::star::container::XChild
{
public:

    // Attributes
    virtual ::sal_Bool SAL_CALL getPreEvaluated() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPreEvaluated( ::sal_Bool _preevaluated ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getDeepTraversing() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setDeepTraversing( ::sal_Bool _deeptraversing ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getName() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setName( const ::rtl::OUString& _name ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getFormula() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setFormula( const ::rtl::OUString& _formula ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::beans::Optional< ::rtl::OUString > SAL_CALL getInitialFormula() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setInitialFormula( const ::com::sun::star::beans::Optional< ::rtl::OUString >& _initialformula ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::report::XFunction >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_REPORT_XFUNCTION_HDL
