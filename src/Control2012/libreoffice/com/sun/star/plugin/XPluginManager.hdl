#ifndef INCLUDED_COM_SUN_STAR_PLUGIN_XPLUGINMANAGER_HDL
#define INCLUDED_COM_SUN_STAR_PLUGIN_XPLUGINMANAGER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XWindowPeer; } } } }
#include "com/sun/star/plugin/PluginException.hdl"
namespace com { namespace sun { namespace star { namespace plugin { class XPlugin; } } } }
#include "com/sun/star/plugin/PluginDescription.hdl"
namespace com { namespace sun { namespace star { namespace plugin { class XPluginContext; } } } }
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XToolkit; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace plugin {

class SAL_NO_VTABLE XPluginManager : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPluginContext > SAL_CALL createPluginContext(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::plugin::PluginDescription > SAL_CALL getPluginDescriptions(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin > SAL_CALL createPlugin( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPluginContext >& acontext, ::sal_Int16 mode, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& argn, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& argv, const ::com::sun::star::plugin::PluginDescription& plugintype ) throw (::com::sun::star::plugin::PluginException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin > SAL_CALL createPluginFromURL( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPluginContext >& acontext, ::sal_Int16 mode, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& argn, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& argv, const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XToolkit >& toolkit, const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindowPeer >& parent, const ::rtl::OUString& url ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPluginManager >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_PLUGIN_XPLUGINMANAGER_HDL
