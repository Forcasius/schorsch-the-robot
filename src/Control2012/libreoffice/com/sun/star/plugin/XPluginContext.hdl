#ifndef INCLUDED_COM_SUN_STAR_PLUGIN_XPLUGINCONTEXT_HDL
#define INCLUDED_COM_SUN_STAR_PLUGIN_XPLUGINCONTEXT_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace lang { class XEventListener; } } } }
#include "com/sun/star/plugin/PluginException.hdl"
#include "com/sun/star/plugin/PluginVariable.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace plugin { class XPlugin; } } } }
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace io { class XActiveDataSource; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace plugin {

class SAL_NO_VTABLE XPluginContext : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL getValue( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin >& xPlugin, ::com::sun::star::plugin::PluginVariable aVariable ) throw (::com::sun::star::plugin::PluginException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL getURLNotify( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin >& plugin, const ::rtl::OUString& url, const ::rtl::OUString& target, const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XEventListener >& listener ) throw (::com::sun::star::plugin::PluginException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL getURL( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin >& plugin, const ::rtl::OUString& url, const ::rtl::OUString& target ) throw (::com::sun::star::plugin::PluginException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL postURLNotify( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin >& plugin, const ::rtl::OUString& url, const ::rtl::OUString& target, const ::com::sun::star::uno::Sequence< ::sal_Int8 >& buf, ::sal_Bool file, const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XEventListener >& listener ) throw (::com::sun::star::plugin::PluginException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL postURL( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin >& plugin, const ::rtl::OUString& url, const ::rtl::OUString& target, const ::com::sun::star::uno::Sequence< ::sal_Int8 >& buf, ::sal_Bool file ) throw (::com::sun::star::plugin::PluginException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL newStream( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin >& plugin, const ::rtl::OUString& mimetype, const ::rtl::OUString& target, const ::com::sun::star::uno::Reference< ::com::sun::star::io::XActiveDataSource >& aSource ) throw (::com::sun::star::plugin::PluginException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL displayStatusText( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin >& plugin, const ::rtl::OUString& message ) throw (::com::sun::star::plugin::PluginException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getUserAgent( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPlugin >& plugin ) throw (::com::sun::star::plugin::PluginException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::plugin::XPluginContext >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_PLUGIN_XPLUGINCONTEXT_HDL
