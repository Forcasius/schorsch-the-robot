#ifndef INCLUDED_COM_SUN_STAR_I18N_CALENDAR_HDL
#define INCLUDED_COM_SUN_STAR_I18N_CALENDAR_HDL

#include "sal/config.h"

#include "com/sun/star/i18n/CalendarItem.hdl"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace i18n {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct Calendar {
    inline Calendar() SAL_THROW(());

    inline Calendar(const ::com::sun::star::uno::Sequence< ::com::sun::star::i18n::CalendarItem >& Days_, const ::com::sun::star::uno::Sequence< ::com::sun::star::i18n::CalendarItem >& Months_, const ::com::sun::star::uno::Sequence< ::com::sun::star::i18n::CalendarItem >& Eras_, const ::rtl::OUString& StartOfWeek_, const ::sal_Int16& MinimumNumberOfDaysForFirstWeek_, const ::sal_Bool& Default_, const ::rtl::OUString& Name_) SAL_THROW(());

    ::com::sun::star::uno::Sequence< ::com::sun::star::i18n::CalendarItem > Days;
    ::com::sun::star::uno::Sequence< ::com::sun::star::i18n::CalendarItem > Months;
    ::com::sun::star::uno::Sequence< ::com::sun::star::i18n::CalendarItem > Eras;
    ::rtl::OUString StartOfWeek;
    ::sal_Int16 MinimumNumberOfDaysForFirstWeek;
    ::sal_Bool Default;
    ::rtl::OUString Name;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::i18n::Calendar* );

#endif // INCLUDED_COM_SUN_STAR_I18N_CALENDAR_HDL
