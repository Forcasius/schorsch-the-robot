#ifndef INCLUDED_COM_SUN_STAR_I18N_XTRANSLITERATION_HDL
#define INCLUDED_COM_SUN_STAR_I18N_XTRANSLITERATION_HDL

#include "sal/config.h"

#include "com/sun/star/i18n/TransliterationModulesNew.hdl"
#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/i18n/TransliterationModules.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace i18n {

class SAL_NO_VTABLE XTransliteration : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL getName(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getType(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL loadModule( ::com::sun::star::i18n::TransliterationModules eModType, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL loadModuleNew( const ::com::sun::star::uno::Sequence< ::com::sun::star::i18n::TransliterationModulesNew >& aModType, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL loadModuleByImplName( const ::rtl::OUString& aImplName, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL loadModulesByImplNames( const ::com::sun::star::uno::Sequence< ::rtl::OUString >& aImplNameList, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getAvailableModules( const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL transliterate( const ::rtl::OUString& aInStr, ::sal_Int32 nStartPos, ::sal_Int32 nCount, ::com::sun::star::uno::Sequence< ::sal_Int32 >& rOffset ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL folding( const ::rtl::OUString& aInStr, ::sal_Int32 nStartPos, ::sal_Int32 nCount, ::com::sun::star::uno::Sequence< ::sal_Int32 >& rOffset ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL equals( const ::rtl::OUString& aStr1, ::sal_Int32 nPos1, ::sal_Int32 nCount1, ::sal_Int32& rMatch1, const ::rtl::OUString& aStr2, ::sal_Int32 nPos2, ::sal_Int32 nCount2, ::sal_Int32& rMatch2 ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL transliterateRange( const ::rtl::OUString& aStr1, const ::rtl::OUString& aStr2 ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL compareSubstring( const ::rtl::OUString& aStr1, ::sal_Int32 nOff1, ::sal_Int32 nLen1, const ::rtl::OUString& aStr2, ::sal_Int32 nOff2, ::sal_Int32 nLen2 ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL compareString( const ::rtl::OUString& aStr1, const ::rtl::OUString& aStr2 ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::i18n::XTransliteration >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_I18N_XTRANSLITERATION_HDL
