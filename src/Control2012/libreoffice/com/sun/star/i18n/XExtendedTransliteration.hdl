#ifndef INCLUDED_COM_SUN_STAR_I18N_XEXTENDEDTRANSLITERATION_HDL
#define INCLUDED_COM_SUN_STAR_I18N_XEXTENDEDTRANSLITERATION_HDL

#include "sal/config.h"

#include "com/sun/star/i18n/XTransliteration.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/i18n/MultipleCharsOutputException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace i18n {

class SAL_NO_VTABLE XExtendedTransliteration : public ::com::sun::star::i18n::XTransliteration
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL transliterateString2String( const ::rtl::OUString& aStr, ::sal_Int32 nStartPos, ::sal_Int32 nCount ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL transliterateChar2String( ::sal_Unicode cChar ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Unicode SAL_CALL transliterateChar2Char( ::sal_Unicode cChar ) throw (::com::sun::star::i18n::MultipleCharsOutputException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::i18n::XExtendedTransliteration >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_I18N_XEXTENDEDTRANSLITERATION_HDL
