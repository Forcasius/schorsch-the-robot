#ifndef INCLUDED_COM_SUN_STAR_I18N_LINEBREAKRESULTS_HDL
#define INCLUDED_COM_SUN_STAR_I18N_LINEBREAKRESULTS_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace linguistic2 { class XHyphenatedWord; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace i18n {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct LineBreakResults {
    inline LineBreakResults() SAL_THROW(());

    inline LineBreakResults(const ::sal_Int16& breakType_, const ::sal_Int32& breakIndex_, const ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XHyphenatedWord >& rHyphenatedWord_) SAL_THROW(());

    ::sal_Int16 breakType;
    ::sal_Int32 breakIndex;
    ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XHyphenatedWord > rHyphenatedWord;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::i18n::LineBreakResults* );

#endif // INCLUDED_COM_SUN_STAR_I18N_LINEBREAKRESULTS_HDL
