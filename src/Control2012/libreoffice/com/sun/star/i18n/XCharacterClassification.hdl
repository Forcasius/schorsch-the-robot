#ifndef INCLUDED_COM_SUN_STAR_I18N_XCHARACTERCLASSIFICATION_HDL
#define INCLUDED_COM_SUN_STAR_I18N_XCHARACTERCLASSIFICATION_HDL

#include "sal/config.h"

#include "com/sun/star/i18n/ParseResult.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace i18n {

class SAL_NO_VTABLE XCharacterClassification : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL toUpper( const ::rtl::OUString& aText, ::sal_Int32 nPos, ::sal_Int32 nCount, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL toLower( const ::rtl::OUString& aText, ::sal_Int32 nPos, ::sal_Int32 nCount, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL toTitle( const ::rtl::OUString& aText, ::sal_Int32 nPos, ::sal_Int32 nCount, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getType( const ::rtl::OUString& aText, ::sal_Int32 nPos ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getCharacterDirection( const ::rtl::OUString& aText, ::sal_Int32 nPos ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getScript( const ::rtl::OUString& aText, ::sal_Int32 nPos ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getCharacterType( const ::rtl::OUString& aText, ::sal_Int32 nPos, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getStringType( const ::rtl::OUString& aText, ::sal_Int32 nPos, ::sal_Int32 nCount, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::i18n::ParseResult SAL_CALL parseAnyToken( const ::rtl::OUString& aText, ::sal_Int32 nPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int32 nStartCharFlags, const ::rtl::OUString& aUserDefinedCharactersStart, ::sal_Int32 nContCharFlags, const ::rtl::OUString& aUserDefinedCharactersCont ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::i18n::ParseResult SAL_CALL parsePredefinedToken( ::sal_Int32 nTokenType, const ::rtl::OUString& aText, ::sal_Int32 nPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int32 nStartCharFlags, const ::rtl::OUString& aUserDefinedCharactersStart, ::sal_Int32 nContCharFlags, const ::rtl::OUString& aUserDefinedCharactersCont ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::i18n::XCharacterClassification >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_I18N_XCHARACTERCLASSIFICATION_HDL
