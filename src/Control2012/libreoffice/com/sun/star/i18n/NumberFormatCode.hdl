#ifndef INCLUDED_COM_SUN_STAR_I18N_NUMBERFORMATCODE_HDL
#define INCLUDED_COM_SUN_STAR_I18N_NUMBERFORMATCODE_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace i18n {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct NumberFormatCode {
    inline NumberFormatCode() SAL_THROW(());

    inline NumberFormatCode(const ::sal_Int16& Type_, const ::sal_Int16& Usage_, const ::rtl::OUString& Code_, const ::rtl::OUString& DefaultName_, const ::rtl::OUString& NameID_, const ::sal_Int16& Index_, const ::sal_Bool& Default_) SAL_THROW(());

    ::sal_Int16 Type;
    ::sal_Int16 Usage;
    ::rtl::OUString Code;
    ::rtl::OUString DefaultName;
    ::rtl::OUString NameID;
    ::sal_Int16 Index;
    ::sal_Bool Default;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::i18n::NumberFormatCode* );

#endif // INCLUDED_COM_SUN_STAR_I18N_NUMBERFORMATCODE_HDL
