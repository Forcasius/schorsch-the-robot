#ifndef INCLUDED_COM_SUN_STAR_I18N_FORMATELEMENT_HDL
#define INCLUDED_COM_SUN_STAR_I18N_FORMATELEMENT_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace i18n {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct FormatElement {
    inline FormatElement() SAL_THROW(());

    inline FormatElement(const ::rtl::OUString& formatCode_, const ::rtl::OUString& formatName_, const ::rtl::OUString& formatKey_, const ::rtl::OUString& formatType_, const ::rtl::OUString& formatUsage_, const ::sal_Int16& formatIndex_, const ::sal_Bool& isDefault_) SAL_THROW(());

    ::rtl::OUString formatCode;
    ::rtl::OUString formatName;
    ::rtl::OUString formatKey;
    ::rtl::OUString formatType;
    ::rtl::OUString formatUsage;
    ::sal_Int16 formatIndex;
    ::sal_Bool isDefault;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::i18n::FormatElement* );

#endif // INCLUDED_COM_SUN_STAR_I18N_FORMATELEMENT_HDL
