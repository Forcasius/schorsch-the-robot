#ifndef INCLUDED_COM_SUN_STAR_I18N_XCOLLATOR_HDL
#define INCLUDED_COM_SUN_STAR_I18N_XCOLLATOR_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace i18n {

class SAL_NO_VTABLE XCollator : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::sal_Int32 SAL_CALL compareSubstring( const ::rtl::OUString& aStr1, ::sal_Int32 nOff1, ::sal_Int32 nLen1, const ::rtl::OUString& aStr2, ::sal_Int32 nOff2, ::sal_Int32 nLen2 ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL compareString( const ::rtl::OUString& aStr1, const ::rtl::OUString& aStr2 ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL loadDefaultCollator( const ::com::sun::star::lang::Locale& aLocale, ::sal_Int32 nCollatorOptions ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL loadCollatorAlgorithm( const ::rtl::OUString& aAlgorithmName, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int32 nCollatorOptions ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL listCollatorAlgorithms( const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL loadCollatorAlgorithmWithEndUserOption( const ::rtl::OUString& aAlgorithmName, const ::com::sun::star::lang::Locale& aLocale, const ::com::sun::star::uno::Sequence< ::sal_Int32 >& aCollatorOptions ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int32 > SAL_CALL listCollatorOptions( const ::rtl::OUString& aAlgorithmName ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::i18n::XCollator >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_I18N_XCOLLATOR_HDL
