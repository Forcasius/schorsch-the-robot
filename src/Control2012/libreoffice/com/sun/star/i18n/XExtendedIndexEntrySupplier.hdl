#ifndef INCLUDED_COM_SUN_STAR_I18N_XEXTENDEDINDEXENTRYSUPPLIER_HDL
#define INCLUDED_COM_SUN_STAR_I18N_XEXTENDEDINDEXENTRYSUPPLIER_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/i18n/XIndexEntrySupplier.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace i18n {

class SAL_NO_VTABLE XExtendedIndexEntrySupplier : public ::com::sun::star::i18n::XIndexEntrySupplier
{
public:

    // Methods
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::lang::Locale > SAL_CALL getLocaleList(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getAlgorithmList( const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL usePhoneticEntry( const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getPhoneticCandidate( const ::rtl::OUString& aIndexEntry, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL loadAlgorithm( const ::com::sun::star::lang::Locale& aLocale, const ::rtl::OUString& aIndexAlgorithm, ::sal_Int32 nCollatorOptions ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getIndexKey( const ::rtl::OUString& aIndexEntry, const ::rtl::OUString& aPhoneticEntry, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL compareIndexEntry( const ::rtl::OUString& aIndexEntry1, const ::rtl::OUString& aPhoneticEntry1, const ::com::sun::star::lang::Locale& aLocale1, const ::rtl::OUString& aIndexEntry2, const ::rtl::OUString& aPhoneticEntry2, const ::com::sun::star::lang::Locale& aLocale2 ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::i18n::XExtendedIndexEntrySupplier >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_I18N_XEXTENDEDINDEXENTRYSUPPLIER_HDL
