#ifndef INCLUDED_COM_SUN_STAR_I18N_XBREAKITERATOR_HDL
#define INCLUDED_COM_SUN_STAR_I18N_XBREAKITERATOR_HDL

#include "sal/config.h"

#include "com/sun/star/i18n/LineBreakHyphenationOptions.hdl"
#include "com/sun/star/i18n/LineBreakUserOptions.hdl"
#include "com/sun/star/i18n/LineBreakResults.hdl"
#include "com/sun/star/i18n/Boundary.hdl"
#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace i18n {

class SAL_NO_VTABLE XBreakIterator : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::sal_Int32 SAL_CALL nextCharacters( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nCharacterIteratorMode, ::sal_Int32 nCount, ::sal_Int32& nDone ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL previousCharacters( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nCharacterIteratorMode, ::sal_Int32 nCount, ::sal_Int32& nDone ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::i18n::Boundary SAL_CALL nextWord( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nWordType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::i18n::Boundary SAL_CALL previousWord( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nWordType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::i18n::Boundary SAL_CALL getWordBoundary( const ::rtl::OUString& aText, ::sal_Int32 nPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nWordType, ::sal_Bool bPreferForward ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getWordType( const ::rtl::OUString& aText, ::sal_Int32 nPos, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isBeginWord( const ::rtl::OUString& aText, ::sal_Int32 nPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nWordType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isEndWord( const ::rtl::OUString& aText, ::sal_Int32 nPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nWordType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL beginOfSentence( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL endOfSentence( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::i18n::LineBreakResults SAL_CALL getLineBreak( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int32 nMinBreakPos, const ::com::sun::star::i18n::LineBreakHyphenationOptions& aHyphOptions, const ::com::sun::star::i18n::LineBreakUserOptions& aUserOptions ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL beginOfScript( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, ::sal_Int16 nScriptType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL endOfScript( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, ::sal_Int16 nScriptType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL nextScript( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, ::sal_Int16 nScriptType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL previousScript( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, ::sal_Int16 nScriptType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getScriptType( const ::rtl::OUString& aText, ::sal_Int32 nPos ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL beginOfCharBlock( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nCharType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL endOfCharBlock( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nCharType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL nextCharBlock( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nCharType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL previousCharBlock( const ::rtl::OUString& aText, ::sal_Int32 nStartPos, const ::com::sun::star::lang::Locale& aLocale, ::sal_Int16 nCharType ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::i18n::XBreakIterator >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_I18N_XBREAKITERATOR_HDL
