#ifndef INCLUDED_COM_SUN_STAR_I18N_LINEBREAKHYPHENATIONOPTIONS_HDL
#define INCLUDED_COM_SUN_STAR_I18N_LINEBREAKHYPHENATIONOPTIONS_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValues.hdl"
namespace com { namespace sun { namespace star { namespace linguistic2 { class XHyphenator; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace i18n {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct LineBreakHyphenationOptions {
    inline LineBreakHyphenationOptions() SAL_THROW(());

    inline LineBreakHyphenationOptions(const ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XHyphenator >& rHyphenator_, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aHyphenationOptions_, const ::sal_Int32& hyphenIndex_) SAL_THROW(());

    ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XHyphenator > rHyphenator;
    ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue > aHyphenationOptions;
    ::sal_Int32 hyphenIndex;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::i18n::LineBreakHyphenationOptions* );

#endif // INCLUDED_COM_SUN_STAR_I18N_LINEBREAKHYPHENATIONOPTIONS_HDL
