#ifndef INCLUDED_COM_SUN_STAR_MEDIA_XPLAYER_HDL
#define INCLUDED_COM_SUN_STAR_MEDIA_XPLAYER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace media { class XPlayerWindow; } } } }
#include "com/sun/star/awt/Size.hdl"
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace media { class XFrameGrabber; } } } }
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace media {

class SAL_NO_VTABLE XPlayer : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL start(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL stop(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isPlaying(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual double SAL_CALL getDuration(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMediaTime( double fTime ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual double SAL_CALL getMediaTime(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setStopTime( double fTime ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual double SAL_CALL getStopTime(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setRate( double fRate ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual double SAL_CALL getRate(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPlaybackLoop( ::sal_Bool bSet ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isPlaybackLoop(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setVolumeDB( ::sal_Int16 nDB ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getVolumeDB(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMute( ::sal_Bool bSet ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isMute(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::awt::Size SAL_CALL getPreferredPlayerWindowSize(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::media::XPlayerWindow > SAL_CALL createPlayerWindow( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aArguments ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::media::XFrameGrabber > SAL_CALL createFrameGrabber(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::media::XPlayer >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_MEDIA_XPLAYER_HDL
