#ifndef INCLUDED_COM_SUN_STAR_CORBA_GIOP_FRAGMENTHEADER_1_2_HDL
#define INCLUDED_COM_SUN_STAR_CORBA_GIOP_FRAGMENTHEADER_1_2_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace corba { namespace giop {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct FragmentHeader_1_2 {
    inline FragmentHeader_1_2() SAL_THROW(());

    inline FragmentHeader_1_2(const ::sal_uInt32& request_id_) SAL_THROW(());

    ::sal_uInt32 request_id;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::corba::giop::FragmentHeader_1_2* );

#endif // INCLUDED_COM_SUN_STAR_CORBA_GIOP_FRAGMENTHEADER_1_2_HDL
