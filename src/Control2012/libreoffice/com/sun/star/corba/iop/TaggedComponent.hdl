#ifndef INCLUDED_COM_SUN_STAR_CORBA_IOP_TAGGEDCOMPONENT_HDL
#define INCLUDED_COM_SUN_STAR_CORBA_IOP_TAGGEDCOMPONENT_HDL

#include "sal/config.h"

#include "com/sun/star/corba/iop/ComponentId.hdl"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace corba { namespace iop {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct TaggedComponent {
    inline TaggedComponent() SAL_THROW(());

    inline TaggedComponent(const ::sal_uInt32& tag_, const ::com::sun::star::uno::Sequence< ::sal_Int8 >& component_data_) SAL_THROW(());

    ::sal_uInt32 tag;
    ::com::sun::star::uno::Sequence< ::sal_Int8 > component_data;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::corba::iop::TaggedComponent* );

#endif // INCLUDED_COM_SUN_STAR_CORBA_IOP_TAGGEDCOMPONENT_HDL
