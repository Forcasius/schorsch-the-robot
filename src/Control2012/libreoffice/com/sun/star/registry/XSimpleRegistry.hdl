#ifndef INCLUDED_COM_SUN_STAR_REGISTRY_XSIMPLEREGISTRY_HDL
#define INCLUDED_COM_SUN_STAR_REGISTRY_XSIMPLEREGISTRY_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/registry/InvalidRegistryException.hdl"
#include "com/sun/star/registry/MergeConflictException.hdl"
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace registry { class XRegistryKey; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace registry {

class SAL_NO_VTABLE XSimpleRegistry : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL getURL(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL open( const ::rtl::OUString& rURL, ::sal_Bool bReadOnly, ::sal_Bool bCreate ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isValid(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL close(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL destroy(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::registry::XRegistryKey > SAL_CALL getRootKey(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isReadOnly(  ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL mergeKey( const ::rtl::OUString& aKeyName, const ::rtl::OUString& aUrl ) throw (::com::sun::star::registry::InvalidRegistryException, ::com::sun::star::registry::MergeConflictException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::registry::XSimpleRegistry >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_REGISTRY_XSIMPLEREGISTRY_HDL
