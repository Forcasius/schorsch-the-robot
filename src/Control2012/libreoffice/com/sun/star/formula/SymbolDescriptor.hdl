#ifndef INCLUDED_COM_SUN_STAR_FORMULA_SYMBOLDESCRIPTOR_HDL
#define INCLUDED_COM_SUN_STAR_FORMULA_SYMBOLDESCRIPTOR_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace formula {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct SymbolDescriptor {
    inline SymbolDescriptor() SAL_THROW(());

    inline SymbolDescriptor(const ::rtl::OUString& sName_, const ::rtl::OUString& sExportName_, const ::rtl::OUString& sSymbolSet_, const ::sal_Int32& nCharacter_, const ::rtl::OUString& sFontName_, const ::sal_Int16& nCharSet_, const ::sal_Int16& nFamily_, const ::sal_Int16& nPitch_, const ::sal_Int16& nWeight_, const ::sal_Int16& nItalic_) SAL_THROW(());

    ::rtl::OUString sName;
    ::rtl::OUString sExportName;
    ::rtl::OUString sSymbolSet;
    ::sal_Int32 nCharacter;
    ::rtl::OUString sFontName;
    ::sal_Int16 nCharSet;
    ::sal_Int16 nFamily;
    ::sal_Int16 nPitch;
    ::sal_Int16 nWeight;
    ::sal_Int16 nItalic;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::formula::SymbolDescriptor* );

#endif // INCLUDED_COM_SUN_STAR_FORMULA_SYMBOLDESCRIPTOR_HDL
