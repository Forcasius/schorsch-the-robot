#ifndef INCLUDED_COM_SUN_STAR_FORM_RUNTIME_XFILTERCONTROLLERLISTENER_HDL
#define INCLUDED_COM_SUN_STAR_FORM_RUNTIME_XFILTERCONTROLLERLISTENER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/form/runtime/FilterEvent.hdl"
#include "com/sun/star/lang/XEventListener.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace form { namespace runtime {

class SAL_NO_VTABLE XFilterControllerListener : public ::com::sun::star::lang::XEventListener
{
public:

    // Methods
    virtual void SAL_CALL predicateExpressionChanged( const ::com::sun::star::form::runtime::FilterEvent& _Event ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL disjunctiveTermRemoved( const ::com::sun::star::form::runtime::FilterEvent& _Event ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL disjunctiveTermAdded( const ::com::sun::star::form::runtime::FilterEvent& _Event ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::form::runtime::XFilterControllerListener >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_FORM_RUNTIME_XFILTERCONTROLLERLISTENER_HDL
