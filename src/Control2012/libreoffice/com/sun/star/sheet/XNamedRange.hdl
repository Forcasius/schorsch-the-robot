#ifndef INCLUDED_COM_SUN_STAR_SHEET_XNAMEDRANGE_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XNAMEDRANGE_HDL

#include "sal/config.h"

#include "com/sun/star/table/CellAddress.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/container/XNamed.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE XNamedRange : public ::com::sun::star::container::XNamed
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL getContent(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setContent( const ::rtl::OUString& aContent ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::table::CellAddress SAL_CALL getReferencePosition(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setReferencePosition( const ::com::sun::star::table::CellAddress& aReferencePosition ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getType(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setType( ::sal_Int32 nType ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XNamedRange >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SHEET_XNAMEDRANGE_HDL
