#ifndef INCLUDED_COM_SUN_STAR_SHEET_XEXTERNALSHEETCACHE_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XEXTERNALSHEETCACHE_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE XExternalSheetCache : public ::com::sun::star::uno::XInterface
{
public:

    // Attributes
    virtual ::sal_Int32 SAL_CALL getTokenIndex() throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual void SAL_CALL setCellValue( ::sal_Int32 nColumn, ::sal_Int32 nRow, const ::com::sun::star::uno::Any& aValue ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Any SAL_CALL getCellValue( ::sal_Int32 nColumn, ::sal_Int32 nRow ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int32 > SAL_CALL getAllRows(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int32 > SAL_CALL getAllColumns( ::sal_Int32 nRow ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XExternalSheetCache >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SHEET_XEXTERNALSHEETCACHE_HDL
