#ifndef INCLUDED_COM_SUN_STAR_SHEET_XCONSOLIDATIONDESCRIPTOR_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XCONSOLIDATIONDESCRIPTOR_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/table/CellAddress.hdl"
#include "com/sun/star/table/CellRangeAddress.hdl"
#include "com/sun/star/sheet/GeneralFunction.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE XConsolidationDescriptor : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::sheet::GeneralFunction SAL_CALL getFunction(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setFunction( ::com::sun::star::sheet::GeneralFunction nFunction ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::table::CellRangeAddress > SAL_CALL getSources(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setSources( const ::com::sun::star::uno::Sequence< ::com::sun::star::table::CellRangeAddress >& aSources ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::table::CellAddress SAL_CALL getStartOutputPosition(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setStartOutputPosition( const ::com::sun::star::table::CellAddress& aStartOutputPosition ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getUseColumnHeaders(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setUseColumnHeaders( ::sal_Bool bUseColumnHeaders ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getUseRowHeaders(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setUseRowHeaders( ::sal_Bool bUseRowHeaders ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getInsertLinks(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setInsertLinks( ::sal_Bool bInsertLinks ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XConsolidationDescriptor >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SHEET_XCONSOLIDATIONDESCRIPTOR_HDL
