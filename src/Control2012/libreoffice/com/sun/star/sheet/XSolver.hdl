#ifndef INCLUDED_COM_SUN_STAR_SHEET_XSOLVER_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XSOLVER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/table/CellAddress.hdl"
namespace com { namespace sun { namespace star { namespace sheet { class XSpreadsheetDocument; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/sheet/SolverConstraint.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE XSolver : public ::com::sun::star::uno::XInterface
{
public:

    // Attributes
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XSpreadsheetDocument > SAL_CALL getDocument() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setDocument( const ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XSpreadsheetDocument >& _document ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::table::CellAddress SAL_CALL getObjective() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setObjective( const ::com::sun::star::table::CellAddress& _objective ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::table::CellAddress > SAL_CALL getVariables() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setVariables( const ::com::sun::star::uno::Sequence< ::com::sun::star::table::CellAddress >& _variables ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::SolverConstraint > SAL_CALL getConstraints() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setConstraints( const ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::SolverConstraint >& _constraints ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getMaximize() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMaximize( ::sal_Bool _maximize ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getSuccess() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual double SAL_CALL getResultValue() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< double > SAL_CALL getSolution() throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual void SAL_CALL solve(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XSolver >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SHEET_XSOLVER_HDL
