#ifndef INCLUDED_COM_SUN_STAR_SHEET_XCELLRANGEMOVEMENT_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XCELLRANGEMOVEMENT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/table/CellAddress.hdl"
#include "com/sun/star/sheet/CellInsertMode.hdl"
#include "com/sun/star/table/CellRangeAddress.hdl"
#include "com/sun/star/sheet/CellDeleteMode.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE XCellRangeMovement : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL insertCells( const ::com::sun::star::table::CellRangeAddress& aRange, ::com::sun::star::sheet::CellInsertMode nMode ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeRange( const ::com::sun::star::table::CellRangeAddress& aRange, ::com::sun::star::sheet::CellDeleteMode nMode ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL moveRange( const ::com::sun::star::table::CellAddress& aDestination, const ::com::sun::star::table::CellRangeAddress& aSource ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL copyRange( const ::com::sun::star::table::CellAddress& aDestination, const ::com::sun::star::table::CellRangeAddress& aSource ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XCellRangeMovement >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SHEET_XCELLRANGEMOVEMENT_HDL
