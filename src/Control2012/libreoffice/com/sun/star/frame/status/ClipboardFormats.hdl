#ifndef INCLUDED_COM_SUN_STAR_FRAME_STATUS_CLIPBOARDFORMATS_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_STATUS_CLIPBOARDFORMATS_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace frame { namespace status {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct ClipboardFormats {
    inline ClipboardFormats() SAL_THROW(());

    inline ClipboardFormats(const ::com::sun::star::uno::Sequence< ::sal_Int64 >& Identifiers_, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& Names_) SAL_THROW(());

    ::com::sun::star::uno::Sequence< ::sal_Int64 > Identifiers;
    ::com::sun::star::uno::Sequence< ::rtl::OUString > Names;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::frame::status::ClipboardFormats* );

#endif // INCLUDED_COM_SUN_STAR_FRAME_STATUS_CLIPBOARDFORMATS_HDL
