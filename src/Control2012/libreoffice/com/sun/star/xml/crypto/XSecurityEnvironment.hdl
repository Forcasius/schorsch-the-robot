#ifndef INCLUDED_COM_SUN_STAR_XML_CRYPTO_XSECURITYENVIRONMENT_HDL
#define INCLUDED_COM_SUN_STAR_XML_CRYPTO_XSECURITYENVIRONMENT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/SecurityException.hdl"
namespace com { namespace sun { namespace star { namespace security { class XCertificate; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xml { namespace crypto {

class SAL_NO_VTABLE XSecurityEnvironment : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate > > SAL_CALL getPersonalCertificates(  ) throw (::com::sun::star::uno::SecurityException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate > SAL_CALL getCertificate( const ::rtl::OUString& issuerName, const ::com::sun::star::uno::Sequence< ::sal_Int8 >& serialNumber ) throw (::com::sun::star::uno::SecurityException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate > > SAL_CALL buildCertificatePath( const ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate >& beginCert ) throw (::com::sun::star::uno::SecurityException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate > SAL_CALL createCertificateFromRaw( const ::com::sun::star::uno::Sequence< ::sal_Int8 >& rawCertificate ) throw (::com::sun::star::uno::SecurityException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate > SAL_CALL createCertificateFromAscii( const ::rtl::OUString& asciiCertificate ) throw (::com::sun::star::uno::SecurityException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL verifyCertificate( const ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate >& xEECertificate, const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate > >& intermediateCertificates ) throw (::com::sun::star::uno::SecurityException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getCertificateCharacters( const ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate >& xCertificate ) throw (::com::sun::star::uno::SecurityException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getSecurityEnvironmentInformation(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::crypto::XSecurityEnvironment >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_CRYPTO_XSECURITYENVIRONMENT_HDL
