#ifndef INCLUDED_COM_SUN_STAR_XML_CRYPTO_SAX_XSECURITYSAXEVENTKEEPER_HDL
#define INCLUDED_COM_SUN_STAR_XML_CRYPTO_SAX_XSECURITYSAXEVENTKEEPER_HDL

#include "sal/config.h"

#include "com/sun/star/xml/crypto/sax/ElementMarkPriority.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/xml/crypto/sax/XSAXEventKeeper.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xml { namespace crypto { namespace sax {

class SAL_NO_VTABLE XSecuritySAXEventKeeper : public ::com::sun::star::xml::crypto::sax::XSAXEventKeeper
{
public:

    // Methods
    virtual ::sal_Int32 SAL_CALL addSecurityElementCollector( ::com::sun::star::xml::crypto::sax::ElementMarkPriority priority, ::sal_Bool modifyElement ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL cloneElementCollector( ::sal_Int32 referenceId, ::com::sun::star::xml::crypto::sax::ElementMarkPriority priority ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setSecurityId( ::sal_Int32 id, ::sal_Int32 securityId ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::crypto::sax::XSecuritySAXEventKeeper >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_CRYPTO_SAX_XSECURITYSAXEVENTKEEPER_HDL
