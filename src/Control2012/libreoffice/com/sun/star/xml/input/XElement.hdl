#ifndef INCLUDED_COM_SUN_STAR_XML_INPUT_XELEMENT_HDL
#define INCLUDED_COM_SUN_STAR_XML_INPUT_XELEMENT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/xml/sax/SAXException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace input { class XElement; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace input { class XAttributes; } } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xml { namespace input {

class SAL_NO_VTABLE XElement : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::input::XElement > SAL_CALL getParent(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getLocalName(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getUid(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::input::XAttributes > SAL_CALL getAttributes(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::input::XElement > SAL_CALL startChildElement( ::sal_Int32 uid, const ::rtl::OUString& localName, const ::com::sun::star::uno::Reference< ::com::sun::star::xml::input::XAttributes >& xAttributes ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL characters( const ::rtl::OUString& chars ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL ignorableWhitespace( const ::rtl::OUString& whitespace ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL processingInstruction( const ::rtl::OUString& target, const ::rtl::OUString& data ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL endElement(  ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::input::XElement >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_INPUT_XELEMENT_HDL
