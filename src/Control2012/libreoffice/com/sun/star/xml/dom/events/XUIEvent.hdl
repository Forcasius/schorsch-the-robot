#ifndef INCLUDED_COM_SUN_STAR_XML_DOM_EVENTS_XUIEVENT_HDL
#define INCLUDED_COM_SUN_STAR_XML_DOM_EVENTS_XUIEVENT_HDL

#include "sal/config.h"

#include "com/sun/star/xml/dom/events/XEvent.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace dom { namespace views { class XAbstractView; } } } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xml { namespace dom { namespace events {

class SAL_NO_VTABLE XUIEvent : public ::com::sun::star::xml::dom::events::XEvent
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::views::XAbstractView > SAL_CALL getView(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getDetail(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL initUIEvent( const ::rtl::OUString& typeArg, ::sal_Bool canBubbleArg, ::sal_Bool cancelableArg, const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::views::XAbstractView >& viewArg, ::sal_Int32 detailArg ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::events::XUIEvent >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_DOM_EVENTS_XUIEVENT_HDL
