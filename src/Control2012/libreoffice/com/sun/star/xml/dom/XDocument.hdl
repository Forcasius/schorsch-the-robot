#ifndef INCLUDED_COM_SUN_STAR_XML_DOM_XDOCUMENT_HDL
#define INCLUDED_COM_SUN_STAR_XML_DOM_XDOCUMENT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XDOMImplementation; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XNodeList; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XDocumentType; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XProcessingInstruction; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XEntityReference; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XElement; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XDocumentFragment; } } } } }
#include "com/sun/star/xml/dom/DOMException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XComment; } } } } }
#include "com/sun/star/xml/dom/XNode.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XCDATASection; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XAttr; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XText; } } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xml { namespace dom {

class SAL_NO_VTABLE XDocument : public ::com::sun::star::xml::dom::XNode
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XAttr > SAL_CALL createAttribute( const ::rtl::OUString& name ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XAttr > SAL_CALL createAttributeNS( const ::rtl::OUString& namespaceURI, const ::rtl::OUString& qualifiedName ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XCDATASection > SAL_CALL createCDATASection( const ::rtl::OUString& data ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XComment > SAL_CALL createComment( const ::rtl::OUString& data ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocumentFragment > SAL_CALL createDocumentFragment(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XElement > SAL_CALL createElement( const ::rtl::OUString& tagName ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XElement > SAL_CALL createElementNS( const ::rtl::OUString& namespaceURI, const ::rtl::OUString& qualifiedName ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XEntityReference > SAL_CALL createEntityReference( const ::rtl::OUString& name ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XProcessingInstruction > SAL_CALL createProcessingInstruction( const ::rtl::OUString& target, const ::rtl::OUString& data ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XText > SAL_CALL createTextNode( const ::rtl::OUString& data ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocumentType > SAL_CALL getDoctype(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XElement > SAL_CALL getDocumentElement(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XElement > SAL_CALL getElementById( const ::rtl::OUString& elementId ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNodeList > SAL_CALL getElementsByTagName( const ::rtl::OUString& tagname ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNodeList > SAL_CALL getElementsByTagNameNS( const ::rtl::OUString& namespaceURI, const ::rtl::OUString& localName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDOMImplementation > SAL_CALL getImplementation(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL importNode( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode >& importedNode, ::sal_Bool deep ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocument >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_DOM_XDOCUMENT_HDL
