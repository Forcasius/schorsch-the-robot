#ifndef INCLUDED_COM_SUN_STAR_XML_DOM_XDOCUMENTBUILDER_HDL
#define INCLUDED_COM_SUN_STAR_XML_DOM_XDOCUMENTBUILDER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XErrorHandler; } } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XEntityResolver; } } } } }
#include "com/sun/star/io/IOException.hdl"
#include "com/sun/star/xml/sax/SAXException.hdl"
namespace com { namespace sun { namespace star { namespace io { class XInputStream; } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XDocument; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XDOMImplementation; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xml { namespace dom {

class SAL_NO_VTABLE XDocumentBuilder : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDOMImplementation > SAL_CALL getDOMImplementation(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isNamespaceAware(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isValidating(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocument > SAL_CALL newDocument(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocument > SAL_CALL parse( const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& is ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocument > SAL_CALL parseURI( const ::rtl::OUString& uri ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setEntityResolver( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XEntityResolver >& er ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setErrorHandler( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XErrorHandler >& eh ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocumentBuilder >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_DOM_XDOCUMENTBUILDER_HDL
