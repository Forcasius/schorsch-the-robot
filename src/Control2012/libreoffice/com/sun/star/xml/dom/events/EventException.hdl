#ifndef INCLUDED_COM_SUN_STAR_XML_DOM_EVENTS_EVENTEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_XML_DOM_EVENTS_EVENTEXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Exception.hdl"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace xml { namespace dom { namespace events {

class CPPU_GCC_DLLPUBLIC_EXPORT EventException : public ::com::sun::star::uno::Exception
{
public:
    inline CPPU_GCC_DLLPRIVATE EventException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE EventException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::sal_Int16& code_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE EventException(EventException const &);

    inline CPPU_GCC_DLLPRIVATE ~EventException();

    inline CPPU_GCC_DLLPRIVATE EventException & operator =(EventException const &);

    ::sal_Int16 code CPPU_GCC3_ALIGN( ::com::sun::star::uno::Exception );
};

} } } } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::xml::dom::events::EventException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_DOM_EVENTS_EVENTEXCEPTION_HDL
