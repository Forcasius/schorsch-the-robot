#ifndef INCLUDED_COM_SUN_STAR_XML_DOM_XNODE_HDL
#define INCLUDED_COM_SUN_STAR_XML_DOM_XNODE_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XDocument; } } } } }
#include "com/sun/star/xml/dom/NodeType.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XNamedNodeMap; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XNodeList; } } } } }
#include "com/sun/star/xml/dom/DOMException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XNode; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xml { namespace dom {

class SAL_NO_VTABLE XNode : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL appendChild( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode >& newChild ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL cloneNode( ::sal_Bool deep ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNamedNodeMap > SAL_CALL getAttributes(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNodeList > SAL_CALL getChildNodes(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL getFirstChild(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL getLastChild(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getLocalName(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getNamespaceURI(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL getNextSibling(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getNodeName(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::xml::dom::NodeType SAL_CALL getNodeType(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getNodeValue(  ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocument > SAL_CALL getOwnerDocument(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL getParentNode(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getPrefix(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL getPreviousSibling(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL hasAttributes(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL hasChildNodes(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL insertBefore( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode >& newChild, const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode >& refChild ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isSupported( const ::rtl::OUString& feature, const ::rtl::OUString& ver ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL normalize(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL removeChild( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode >& oldChild ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode > SAL_CALL replaceChild( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode >& newChild, const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode >& oldChild ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setNodeValue( const ::rtl::OUString& nodeValue ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPrefix( const ::rtl::OUString& prefix ) throw (::com::sun::star::xml::dom::DOMException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XNode >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_DOM_XNODE_HDL
