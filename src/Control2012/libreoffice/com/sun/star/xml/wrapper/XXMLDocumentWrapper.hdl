#ifndef INCLUDED_COM_SUN_STAR_XML_WRAPPER_XXMLDOCUMENTWRAPPER_HDL
#define INCLUDED_COM_SUN_STAR_XML_WRAPPER_XXMLDOCUMENTWRAPPER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/xml/sax/SAXException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XDocumentHandler; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace wrapper { class XXMLElementWrapper; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xml { namespace wrapper {

class SAL_NO_VTABLE XXMLDocumentWrapper : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper > SAL_CALL getCurrentElement(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setCurrentElement( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper >& element ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeCurrentElement(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isCurrent( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper >& node ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isCurrentElementEmpty(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getNodeName( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper >& node ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL clearUselessData( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper >& node, const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper > >& reservedDescendants, const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper >& stopAtNode ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL collapse( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper >& node ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL generateSAXEvents( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XDocumentHandler >& handler, const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XDocumentHandler >& saxEventKeeperHandler, const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper >& startNode, const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper >& endNode ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL getTree( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XDocumentHandler >& handler ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL rebuildIDLink( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLElementWrapper >& node ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::wrapper::XXMLDocumentWrapper >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_WRAPPER_XXMLDOCUMENTWRAPPER_HDL
