#ifndef INCLUDED_COM_SUN_STAR_XML_SAX_XFASTPARSER_HDL
#define INCLUDED_COM_SUN_STAR_XML_SAX_XFASTPARSER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XEntityResolver; } } } } }
#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XFastDocumentHandler; } } } } }
#include "com/sun/star/io/IOException.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XErrorHandler; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XFastTokenHandler; } } } } }
#include "com/sun/star/xml/sax/SAXException.hdl"
#include "com/sun/star/xml/sax/InputSource.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xml { namespace sax {

class SAL_NO_VTABLE XFastParser : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL parseStream( const ::com::sun::star::xml::sax::InputSource& aInputSource ) throw (::com::sun::star::xml::sax::SAXException, ::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setFastDocumentHandler( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XFastDocumentHandler >& Handler ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setTokenHandler( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XFastTokenHandler >& Handler ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL registerNamespace( const ::rtl::OUString& NamespaceURL, ::sal_Int32 NamespaceToken ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setErrorHandler( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XErrorHandler >& Handler ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setEntityResolver( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XEntityResolver >& Resolver ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setLocale( const ::com::sun::star::lang::Locale& locale ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XFastParser >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_SAX_XFASTPARSER_HDL
