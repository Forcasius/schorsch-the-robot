#ifndef INCLUDED_COM_SUN_STAR_XML_SAX_SAXINVALIDCHARACTEREXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_XML_SAX_SAXINVALIDCHARACTEREXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/xml/sax/SAXException.hdl"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace xml { namespace sax {

class CPPU_GCC_DLLPUBLIC_EXPORT SAXInvalidCharacterException : public ::com::sun::star::xml::sax::SAXException
{
public:
    inline CPPU_GCC_DLLPRIVATE SAXInvalidCharacterException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE SAXInvalidCharacterException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::uno::Any& WrappedException_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE SAXInvalidCharacterException(SAXInvalidCharacterException const &);

    inline CPPU_GCC_DLLPRIVATE ~SAXInvalidCharacterException();

    inline CPPU_GCC_DLLPRIVATE SAXInvalidCharacterException & operator =(SAXInvalidCharacterException const &);

};

} } } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::xml::sax::SAXInvalidCharacterException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_SAX_SAXINVALIDCHARACTEREXCEPTION_HDL
