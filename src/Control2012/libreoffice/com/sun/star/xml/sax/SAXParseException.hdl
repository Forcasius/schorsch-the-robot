#ifndef INCLUDED_COM_SUN_STAR_XML_SAX_SAXPARSEEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_XML_SAX_SAXPARSEEXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/xml/sax/SAXException.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace xml { namespace sax {

class CPPU_GCC_DLLPUBLIC_EXPORT SAXParseException : public ::com::sun::star::xml::sax::SAXException
{
public:
    inline CPPU_GCC_DLLPRIVATE SAXParseException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE SAXParseException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::uno::Any& WrappedException_, const ::rtl::OUString& PublicId_, const ::rtl::OUString& SystemId_, const ::sal_Int32& LineNumber_, const ::sal_Int32& ColumnNumber_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE SAXParseException(SAXParseException const &);

    inline CPPU_GCC_DLLPRIVATE ~SAXParseException();

    inline CPPU_GCC_DLLPRIVATE SAXParseException & operator =(SAXParseException const &);

    ::rtl::OUString PublicId CPPU_GCC3_ALIGN( ::com::sun::star::xml::sax::SAXException );
    ::rtl::OUString SystemId;
    ::sal_Int32 LineNumber;
    ::sal_Int32 ColumnNumber;
};

} } } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::xml::sax::SAXParseException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XML_SAX_SAXPARSEEXCEPTION_HDL
