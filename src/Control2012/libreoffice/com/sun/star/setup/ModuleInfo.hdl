#ifndef INCLUDED_COM_SUN_STAR_SETUP_MODULEINFO_HDL
#define INCLUDED_COM_SUN_STAR_SETUP_MODULEINFO_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace setup {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct ModuleInfo {
    inline ModuleInfo() SAL_THROW(());

    inline ModuleInfo(const ::rtl::OUString& strID_, const ::rtl::OUString& strName_, const ::rtl::OUString& strDescription_, const ::rtl::OUString& strOnSelect_, const ::rtl::OUString& strOnDeselect_, const ::sal_Bool& isMinimal_, const ::sal_Bool& isDefault_, const ::sal_Bool& isHiddenRoot_, const ::sal_Bool& isDontSelectByUser_, const ::sal_Int32& nSizeKB_, const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& seqSubModules_) SAL_THROW(());

    ::rtl::OUString strID;
    ::rtl::OUString strName;
    ::rtl::OUString strDescription;
    ::rtl::OUString strOnSelect;
    ::rtl::OUString strOnDeselect;
    ::sal_Bool isMinimal;
    ::sal_Bool isDefault;
    ::sal_Bool isHiddenRoot;
    ::sal_Bool isDontSelectByUser;
    ::sal_Int32 nSizeKB;
    ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > seqSubModules;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::setup::ModuleInfo* );

#endif // INCLUDED_COM_SUN_STAR_SETUP_MODULEINFO_HDL
