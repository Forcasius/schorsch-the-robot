#ifndef INCLUDED_COM_SUN_STAR_SETUP_MAKEFOLDERITEMACTION_HDL
#define INCLUDED_COM_SUN_STAR_SETUP_MAKEFOLDERITEMACTION_HDL

#include "sal/config.h"

#include "com/sun/star/setup/BaseAction.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace setup {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct MakeFolderItemAction: public ::com::sun::star::setup::BaseAction {
    inline MakeFolderItemAction() SAL_THROW(());

    inline MakeFolderItemAction(const ::com::sun::star::setup::ActionType& eType_, const ::sal_Bool& bDone_, const ::sal_Bool& bProcess_, const ::rtl::OUString& strFoldername_, const ::rtl::OUString& strItemname_, const ::rtl::OUString& strDestinationPath_, const ::rtl::OUString& strDestinationExecutable_, const ::rtl::OUString& strParameter_) SAL_THROW(());

    ::rtl::OUString strFoldername CPPU_GCC3_ALIGN(::com::sun::star::setup::BaseAction);
    ::rtl::OUString strItemname;
    ::rtl::OUString strDestinationPath;
    ::rtl::OUString strDestinationExecutable;
    ::rtl::OUString strParameter;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::setup::MakeFolderItemAction* );

#endif // INCLUDED_COM_SUN_STAR_SETUP_MAKEFOLDERITEMACTION_HDL
