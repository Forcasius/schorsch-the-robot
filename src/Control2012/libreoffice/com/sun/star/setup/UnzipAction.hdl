#ifndef INCLUDED_COM_SUN_STAR_SETUP_UNZIPACTION_HDL
#define INCLUDED_COM_SUN_STAR_SETUP_UNZIPACTION_HDL

#include "sal/config.h"

#include "com/sun/star/util/DateTime.hdl"
#include "com/sun/star/setup/BaseAction.hdl"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace setup {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct UnzipAction: public ::com::sun::star::setup::BaseAction {
    inline UnzipAction() SAL_THROW(());

    inline UnzipAction(const ::com::sun::star::setup::ActionType& eType_, const ::sal_Bool& bDone_, const ::sal_Bool& bProcess_, const ::rtl::OUString& strSourceFilename_, const ::rtl::OUString& strDestinationPath_, const ::rtl::OUString& strPattern_, const ::sal_Bool& bUnoComponent_, const ::sal_Bool& bActiveX_, const ::sal_Bool& bOverwrite_, const ::com::sun::star::util::DateTime& aDateTime_, const ::sal_Int32& nRights_, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& seqSubFiles_) SAL_THROW(());

    ::rtl::OUString strSourceFilename CPPU_GCC3_ALIGN(::com::sun::star::setup::BaseAction);
    ::rtl::OUString strDestinationPath;
    ::rtl::OUString strPattern;
    ::sal_Bool bUnoComponent;
    ::sal_Bool bActiveX;
    ::sal_Bool bOverwrite;
    ::com::sun::star::util::DateTime aDateTime;
    ::sal_Int32 nRights;
    ::com::sun::star::uno::Sequence< ::rtl::OUString > seqSubFiles;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::setup::UnzipAction* );

#endif // INCLUDED_COM_SUN_STAR_SETUP_UNZIPACTION_HDL
