#ifndef INCLUDED_COM_SUN_STAR_SETUP_PROFILEITEMACTION_HDL
#define INCLUDED_COM_SUN_STAR_SETUP_PROFILEITEMACTION_HDL

#include "sal/config.h"

#include "com/sun/star/setup/BaseAction.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace setup {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct ProfileItemAction: public ::com::sun::star::setup::BaseAction {
    inline ProfileItemAction() SAL_THROW(());

    inline ProfileItemAction(const ::com::sun::star::setup::ActionType& eType_, const ::sal_Bool& bDone_, const ::sal_Bool& bProcess_, const ::rtl::OUString& strProfilename_, const ::rtl::OUString& strSection_, const ::rtl::OUString& strKey_, const ::rtl::OUString& strValue_, const ::sal_Bool& bCreate_) SAL_THROW(());

    ::rtl::OUString strProfilename CPPU_GCC3_ALIGN(::com::sun::star::setup::BaseAction);
    ::rtl::OUString strSection;
    ::rtl::OUString strKey;
    ::rtl::OUString strValue;
    ::sal_Bool bCreate;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::setup::ProfileItemAction* );

#endif // INCLUDED_COM_SUN_STAR_SETUP_PROFILEITEMACTION_HDL
