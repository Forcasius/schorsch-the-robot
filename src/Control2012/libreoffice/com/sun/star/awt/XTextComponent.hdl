#ifndef INCLUDED_COM_SUN_STAR_AWT_XTEXTCOMPONENT_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XTEXTCOMPONENT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XTextListener; } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/awt/Selection.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE XTextComponent : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL addTextListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTextListener >& l ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeTextListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTextListener >& l ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setText( const ::rtl::OUString& aText ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL insertText( const ::com::sun::star::awt::Selection& Sel, const ::rtl::OUString& Text ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getText(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getSelectedText(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setSelection( const ::com::sun::star::awt::Selection& aSelection ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::awt::Selection SAL_CALL getSelection(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isEditable(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setEditable( ::sal_Bool bEditable ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMaxTextLen( ::sal_Int16 nLen ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getMaxTextLen(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTextComponent >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_AWT_XTEXTCOMPONENT_HDL
