#ifndef INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDSELECTION_HDL
#define INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDSELECTION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace awt { namespace grid { class XGridSelectionListener; } } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace awt { namespace grid {

class SAL_NO_VTABLE XGridSelection : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL selectAllRows(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL selectRow( ::sal_Int32 RowIndex ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL deselectAllRows(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL deselectRow( ::sal_Int32 RowIndex ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int32 > SAL_CALL getSelection(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isSelectionEmpty(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isSelectedIndex( ::sal_Int32 index ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL addSelectionListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::grid::XGridSelectionListener >& listener ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeSelectionListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::grid::XGridSelectionListener >& listener ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::grid::XGridSelection >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDSELECTION_HDL
