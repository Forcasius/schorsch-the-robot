#ifndef INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDCOLUMN_HDL
#define INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDCOLUMN_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace awt { namespace grid { class XGridColumnListener; } } } } }
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/style/HorizontalAlignment.hdl"
#include "com/sun/star/util/XCloneable.hdl"
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace awt { namespace grid {

class SAL_NO_VTABLE XGridColumn : public ::com::sun::star::lang::XComponent, public ::com::sun::star::util::XCloneable
{
public:

    // Attributes
    virtual ::com::sun::star::uno::Any SAL_CALL getIdentifier() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setIdentifier( const ::com::sun::star::uno::Any& _identifier ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getColumnWidth() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setColumnWidth( ::sal_Int32 _columnwidth ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getMinWidth() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMinWidth( ::sal_Int32 _minwidth ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getMaxWidth() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMaxWidth( ::sal_Int32 _maxwidth ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getResizeable() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setResizeable( ::sal_Bool _resizeable ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getFlexibility() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setFlexibility( ::sal_Int32 _flexibility ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::style::HorizontalAlignment SAL_CALL getHorizontalAlign() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setHorizontalAlign( ::com::sun::star::style::HorizontalAlignment _horizontalalign ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getTitle() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setTitle( const ::rtl::OUString& _title ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getHelpText() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setHelpText( const ::rtl::OUString& _helptext ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getIndex() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getDataColumnIndex() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setDataColumnIndex( ::sal_Int32 _datacolumnindex ) throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual void SAL_CALL addGridColumnListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::grid::XGridColumnListener >& listener ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeGridColumnListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::grid::XGridColumnListener >& listener ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::grid::XGridColumn >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDCOLUMN_HDL
