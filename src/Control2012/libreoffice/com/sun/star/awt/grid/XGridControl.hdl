#ifndef INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDCONTROL_HDL
#define INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDCONTROL_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/awt/grid/XGridSelection.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace awt { namespace grid {

class SAL_NO_VTABLE XGridControl : public ::com::sun::star::awt::grid::XGridSelection
{
public:

    // Methods
    virtual ::sal_Int32 SAL_CALL getColumnAtPoint( ::sal_Int32 X, ::sal_Int32 Y ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getRowAtPoint( ::sal_Int32 X, ::sal_Int32 Y ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getCurrentColumn(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getCurrentRow(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::grid::XGridControl >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDCONTROL_HDL
