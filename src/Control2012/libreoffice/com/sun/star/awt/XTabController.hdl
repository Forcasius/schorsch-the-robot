#ifndef INCLUDED_COM_SUN_STAR_AWT_XTABCONTROLLER_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XTABCONTROLLER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XControlContainer; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XTabControllerModel; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XControl; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE XTabController : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL setModel( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabControllerModel >& Model ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabControllerModel > SAL_CALL getModel(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setContainer( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlContainer >& Container ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControlContainer > SAL_CALL getContainer(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::awt::XControl > > SAL_CALL getControls(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL autoTabOrder(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL activateTabOrder(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL activateFirst(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL activateLast(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XTabController >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_AWT_XTABCONTROLLER_HDL
