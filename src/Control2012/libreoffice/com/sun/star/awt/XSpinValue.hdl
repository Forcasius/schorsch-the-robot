#ifndef INCLUDED_COM_SUN_STAR_AWT_XSPINVALUE_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XSPINVALUE_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XAdjustmentListener; } } } }
#include "com/sun/star/lang/NoSupportException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE XSpinValue : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL addAdjustmentListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XAdjustmentListener >& listener ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeAdjustmentListener( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XAdjustmentListener >& listener ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setValue( ::sal_Int32 value ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setValues( ::sal_Int32 minValue, ::sal_Int32 maxValue, ::sal_Int32 currentValue ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getValue(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMinimum( ::sal_Int32 minValue ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setMaximum( ::sal_Int32 maxValue ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getMinimum(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getMaximum(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setSpinIncrement( ::sal_Int32 spinIncrement ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getSpinIncrement(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setOrientation( ::sal_Int32 orientation ) throw (::com::sun::star::lang::NoSupportException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getOrientation(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XSpinValue >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_AWT_XSPINVALUE_HDL
