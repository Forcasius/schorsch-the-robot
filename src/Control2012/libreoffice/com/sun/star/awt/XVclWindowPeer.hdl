#ifndef INCLUDED_COM_SUN_STAR_AWT_XVCLWINDOWPEER_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XVCLWINDOWPEER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/awt/FontDescriptor.hdl"
#include "com/sun/star/util/Color.hdl"
#include "com/sun/star/awt/XWindowPeer.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE XVclWindowPeer : public ::com::sun::star::awt::XWindowPeer
{
public:

    // Methods
    virtual ::sal_Bool SAL_CALL isChild( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XWindowPeer >& Peer ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setDesignMode( ::sal_Bool bOn ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isDesignMode(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL enableClipSiblings( ::sal_Bool bClip ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setForeground( ::sal_Int32 Color ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setControlFont( const ::com::sun::star::awt::FontDescriptor& aFont ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL getStyles( ::sal_Int16 nType, ::com::sun::star::awt::FontDescriptor& Font, ::sal_Int32& ForegroundColor, ::sal_Int32& BackgroundColor ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setProperty( const ::rtl::OUString& PropertyName, const ::com::sun::star::uno::Any& Value ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Any SAL_CALL getProperty( const ::rtl::OUString& PropertyName ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::awt::XVclWindowPeer >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_AWT_XVCLWINDOWPEER_HDL
