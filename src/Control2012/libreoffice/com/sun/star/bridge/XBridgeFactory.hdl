#ifndef INCLUDED_COM_SUN_STAR_BRIDGE_XBRIDGEFACTORY_HDL
#define INCLUDED_COM_SUN_STAR_BRIDGE_XBRIDGEFACTORY_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/bridge/BridgeExistsException.hdl"
namespace com { namespace sun { namespace star { namespace connection { class XConnection; } } } }
namespace com { namespace sun { namespace star { namespace bridge { class XInstanceProvider; } } } }
namespace com { namespace sun { namespace star { namespace bridge { class XBridge; } } } }
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace bridge {

class SAL_NO_VTABLE XBridgeFactory : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::bridge::XBridge > SAL_CALL createBridge( const ::rtl::OUString& sName, const ::rtl::OUString& sProtocol, const ::com::sun::star::uno::Reference< ::com::sun::star::connection::XConnection >& aConnection, const ::com::sun::star::uno::Reference< ::com::sun::star::bridge::XInstanceProvider >& anInstanceProvider ) throw (::com::sun::star::bridge::BridgeExistsException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::bridge::XBridge > SAL_CALL getBridge( const ::rtl::OUString& sName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::bridge::XBridge > > SAL_CALL getExistingBridges(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::bridge::XBridgeFactory >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_BRIDGE_XBRIDGEFACTORY_HDL
