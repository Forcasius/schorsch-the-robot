#ifndef INCLUDED_COM_SUN_STAR_MOZILLA_XPLUGININSTANCEPEER_HDL
#define INCLUDED_COM_SUN_STAR_MOZILLA_XPLUGININSTANCEPEER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace io { class XInputStream; } } } }
namespace com { namespace sun { namespace star { namespace mozilla { class XPluginInstanceNotifySink; } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace lang { class XMultiServiceFactory; } } } }
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace io { class XActiveDataSource; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace mozilla {

class SAL_NO_VTABLE XPluginInstancePeer : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::sal_Bool SAL_CALL setWindowSize( ::sal_Int32 width, ::sal_Int32 heigth ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL showStatusMessage( const ::rtl::OUString& message ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL enableScripting( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& document, const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& servicemanager ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL newStream( const ::rtl::OUString& MIMEDesc, const ::rtl::OUString& target, const ::com::sun::star::uno::Reference< ::com::sun::star::io::XActiveDataSource >& data ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL getURL( const ::rtl::OUString& aURL, const ::rtl::OUString& target, const ::rtl::OUString& alternativeHost, const ::rtl::OUString& referrer, const ::com::sun::star::uno::Reference< ::com::sun::star::mozilla::XPluginInstanceNotifySink >& sink ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL postURL( const ::rtl::OUString& aURL, const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& postData, const ::rtl::OUString& target, const ::rtl::OUString& alternativeHost, const ::rtl::OUString& referrer, const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& postHeaders, const ::com::sun::star::uno::Reference< ::com::sun::star::mozilla::XPluginInstanceNotifySink >& sink ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::mozilla::XPluginInstancePeer >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_MOZILLA_XPLUGININSTANCEPEER_HDL
