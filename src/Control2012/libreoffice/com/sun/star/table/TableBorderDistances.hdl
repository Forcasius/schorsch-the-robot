#ifndef INCLUDED_COM_SUN_STAR_TABLE_TABLEBORDERDISTANCES_HDL
#define INCLUDED_COM_SUN_STAR_TABLE_TABLEBORDERDISTANCES_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace table {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct TableBorderDistances {
    inline TableBorderDistances() SAL_THROW(());

    inline TableBorderDistances(const ::sal_Int16& TopDistance_, const ::sal_Bool& IsTopDistanceValid_, const ::sal_Int16& BottomDistance_, const ::sal_Bool& IsBottomDistanceValid_, const ::sal_Int16& LeftDistance_, const ::sal_Bool& IsLeftDistanceValid_, const ::sal_Int16& RightDistance_, const ::sal_Bool& IsRightDistanceValid_) SAL_THROW(());

    ::sal_Int16 TopDistance;
    ::sal_Bool IsTopDistanceValid;
    ::sal_Int16 BottomDistance;
    ::sal_Bool IsBottomDistanceValid;
    ::sal_Int16 LeftDistance;
    ::sal_Bool IsLeftDistanceValid;
    ::sal_Int16 RightDistance;
    ::sal_Bool IsRightDistanceValid;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::table::TableBorderDistances* );

#endif // INCLUDED_COM_SUN_STAR_TABLE_TABLEBORDERDISTANCES_HDL
