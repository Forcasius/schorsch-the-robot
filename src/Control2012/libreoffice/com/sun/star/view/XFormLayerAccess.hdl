#ifndef INCLUDED_COM_SUN_STAR_VIEW_XFORMLAYERACCESS_HDL
#define INCLUDED_COM_SUN_STAR_VIEW_XFORMLAYERACCESS_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace form { class XForm; } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace form { namespace runtime { class XFormController; } } } } }
#include "com/sun/star/view/XControlAccess.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace view {

class SAL_NO_VTABLE XFormLayerAccess : public ::com::sun::star::view::XControlAccess
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::form::runtime::XFormController > SAL_CALL getFormController( const ::com::sun::star::uno::Reference< ::com::sun::star::form::XForm >& Form ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isFormDesignMode(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setFormDesignMode( ::sal_Bool DesignMode ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::view::XFormLayerAccess >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_VIEW_XFORMLAYERACCESS_HDL
