#ifndef INCLUDED_COM_SUN_STAR_CHART2_SYMBOL_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_SYMBOL_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Size.hdl"
namespace com { namespace sun { namespace star { namespace graphic { class XGraphic; } } } }
#include "com/sun/star/chart2/SymbolStyle.hdl"
#include "com/sun/star/drawing/PolyPolygonBezierCoords.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace chart2 {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct Symbol {
    inline Symbol() SAL_THROW(());

    inline Symbol(const ::com::sun::star::chart2::SymbolStyle& Style_, const ::com::sun::star::drawing::PolyPolygonBezierCoords& PolygonCoords_, const ::sal_Int32& StandardSymbol_, const ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic >& Graphic_, const ::com::sun::star::awt::Size& Size_, const ::sal_Int32& BorderColor_, const ::sal_Int32& FillColor_) SAL_THROW(());

    ::com::sun::star::chart2::SymbolStyle Style;
    ::com::sun::star::drawing::PolyPolygonBezierCoords PolygonCoords;
    ::sal_Int32 StandardSymbol;
    ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > Graphic;
    ::com::sun::star::awt::Size Size;
    ::sal_Int32 BorderColor;
    ::sal_Int32 FillColor;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::chart2::Symbol* );

#endif // INCLUDED_COM_SUN_STAR_CHART2_SYMBOL_HDL
