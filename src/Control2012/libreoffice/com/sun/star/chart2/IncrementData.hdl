#ifndef INCLUDED_COM_SUN_STAR_CHART2_INCREMENTDATA_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_INCREMENTDATA_HDL

#include "sal/config.h"

#include "com/sun/star/chart2/SubIncrement.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace chart2 {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct IncrementData {
    inline IncrementData() SAL_THROW(());

    inline IncrementData(const ::com::sun::star::uno::Any& Distance_, const ::com::sun::star::uno::Any& PostEquidistant_, const ::com::sun::star::uno::Any& BaseValue_, const ::com::sun::star::uno::Sequence< ::com::sun::star::chart2::SubIncrement >& SubIncrements_) SAL_THROW(());

    ::com::sun::star::uno::Any Distance;
    ::com::sun::star::uno::Any PostEquidistant;
    ::com::sun::star::uno::Any BaseValue;
    ::com::sun::star::uno::Sequence< ::com::sun::star::chart2::SubIncrement > SubIncrements;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::chart2::IncrementData* );

#endif // INCLUDED_COM_SUN_STAR_CHART2_INCREMENTDATA_HDL
