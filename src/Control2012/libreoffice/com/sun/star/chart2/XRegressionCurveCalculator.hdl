#ifndef INCLUDED_COM_SUN_STAR_CHART2_XREGRESSIONCURVECALCULATOR_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XREGRESSIONCURVECALCULATOR_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace chart2 { class XScaling; } } } }
#include "com/sun/star/geometry/RealPoint2D.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
namespace com { namespace sun { namespace star { namespace util { class XNumberFormatsSupplier; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE XRegressionCurveCalculator : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL recalculateRegression( const ::com::sun::star::uno::Sequence< double >& aXValues, const ::com::sun::star::uno::Sequence< double >& aYValues ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual double SAL_CALL getCurveValue( double x ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::geometry::RealPoint2D > SAL_CALL getCurveValues( double min, double max, ::sal_Int32 nPointCount, const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XScaling >& xScalingX, const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XScaling >& xScalingY, ::sal_Bool bMaySkipPointsInCalculation ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual double SAL_CALL getCorrelationCoefficient(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getRepresentation(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getFormattedRepresentation( const ::com::sun::star::uno::Reference< ::com::sun::star::util::XNumberFormatsSupplier >& xNumFmtSupplier, ::sal_Int32 nNumberFormatKey ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XRegressionCurveCalculator >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_CHART2_XREGRESSIONCURVECALCULATOR_HDL
