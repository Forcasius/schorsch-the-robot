#ifndef INCLUDED_COM_SUN_STAR_CHART2_XCHARTDOCUMENT_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XCHARTDOCUMENT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace beans { class XPropertySet; } } } }
namespace com { namespace sun { namespace star { namespace chart2 { class XChartTypeManager; } } } }
#include "com/sun/star/util/CloseVetoException.hdl"
namespace com { namespace sun { namespace star { namespace chart2 { class XDiagram; } } } }
namespace com { namespace sun { namespace star { namespace chart2 { namespace data { class XDataProvider; } } } } }
#include "com/sun/star/frame/XModel.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE XChartDocument : public ::com::sun::star::frame::XModel
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDiagram > SAL_CALL getFirstDiagram(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setFirstDiagram( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDiagram >& xDiagram ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL createInternalDataProvider( ::sal_Bool bCloneExistingData ) throw (::com::sun::star::util::CloseVetoException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL hasInternalDataProvider(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::chart2::data::XDataProvider > SAL_CALL getDataProvider(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setChartTypeManager( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartTypeManager >& xNewManager ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartTypeManager > SAL_CALL getChartTypeManager(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > SAL_CALL getPageBackground(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XChartDocument >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_CHART2_XCHARTDOCUMENT_HDL
