#ifndef INCLUDED_COM_SUN_STAR_CHART2_XDATAINTERPRETER_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XDATAINTERPRETER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/chart2/InterpretedData.hdl"
namespace com { namespace sun { namespace star { namespace chart2 { namespace data { class XDataSource; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace chart2 { class XDataSeries; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE XDataInterpreter : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::chart2::InterpretedData SAL_CALL interpretDataSource( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::data::XDataSource >& xSource, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aArguments, const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataSeries > >& aSeriesToReUse ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::chart2::InterpretedData SAL_CALL reinterpretDataSeries( const ::com::sun::star::chart2::InterpretedData& aInterpretedData ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isDataCompatible( const ::com::sun::star::chart2::InterpretedData& aInterpretedData ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::chart2::data::XDataSource > SAL_CALL mergeInterpretedData( const ::com::sun::star::chart2::InterpretedData& aInterpretedData ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::chart2::XDataInterpreter >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_CHART2_XDATAINTERPRETER_HDL
