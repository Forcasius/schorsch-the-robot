#ifndef INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTOR_HDL
#define INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTOR_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/util/VetoException.hdl"
namespace com { namespace sun { namespace star { namespace uno { class XInterface; } } } }
namespace com { namespace sun { namespace star { namespace inspection { class XObjectInspectorUI; } } } }
namespace com { namespace sun { namespace star { namespace inspection { class XObjectInspectorModel; } } } }
#include "com/sun/star/frame/XDispatchProvider.hdl"
#include "com/sun/star/frame/XController.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace inspection {

class SAL_NO_VTABLE XObjectInspector : public ::com::sun::star::frame::XController, public ::com::sun::star::frame::XDispatchProvider
{
public:

    // Attributes
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::inspection::XObjectInspectorModel > SAL_CALL getInspectorModel() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setInspectorModel( const ::com::sun::star::uno::Reference< ::com::sun::star::inspection::XObjectInspectorModel >& _inspectormodel ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::inspection::XObjectInspectorUI > SAL_CALL getInspectorUI() throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual void SAL_CALL inspect( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& Objects ) throw (::com::sun::star::util::VetoException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::inspection::XObjectInspector >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTOR_HDL
