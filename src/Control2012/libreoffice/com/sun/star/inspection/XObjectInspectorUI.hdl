#ifndef INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTORUI_HDL
#define INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTORUI_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace inspection { class XPropertyControlObserver; } } } }
namespace com { namespace sun { namespace star { namespace inspection { class XPropertyControl; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/lang/NoSupportException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace inspection {

class SAL_NO_VTABLE XObjectInspectorUI : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL enablePropertyUI( const ::rtl::OUString& PropertyName, ::sal_Bool Enable ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL enablePropertyUIElements( const ::rtl::OUString& PropertyName, ::sal_Int16 Elements, ::sal_Bool Enable ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL rebuildPropertyUI( const ::rtl::OUString& PropertyName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL showPropertyUI( const ::rtl::OUString& PropertyName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL hidePropertyUI( const ::rtl::OUString& PropertyName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL showCategory( const ::rtl::OUString& Category, ::sal_Bool Show ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::inspection::XPropertyControl > SAL_CALL getPropertyControl( const ::rtl::OUString& PropertyName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL registerControlObserver( const ::com::sun::star::uno::Reference< ::com::sun::star::inspection::XPropertyControlObserver >& Observer ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL revokeControlObserver( const ::com::sun::star::uno::Reference< ::com::sun::star::inspection::XPropertyControlObserver >& Observer ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setHelpSectionText( const ::rtl::OUString& HelpText ) throw (::com::sun::star::lang::NoSupportException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::inspection::XObjectInspectorUI >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTORUI_HDL
