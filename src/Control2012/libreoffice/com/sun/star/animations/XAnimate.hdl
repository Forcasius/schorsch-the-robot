#ifndef INCLUDED_COM_SUN_STAR_ANIMATIONS_XANIMATE_HDL
#define INCLUDED_COM_SUN_STAR_ANIMATIONS_XANIMATE_HDL

#include "sal/config.h"

#include "com/sun/star/animations/XAnimationNode.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/animations/TimeFilterPair.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace animations {

class SAL_NO_VTABLE XAnimate : public ::com::sun::star::animations::XAnimationNode
{
public:

    // Attributes
    virtual ::com::sun::star::uno::Any SAL_CALL getTarget() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setTarget( const ::com::sun::star::uno::Any& _target ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getSubItem() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setSubItem( ::sal_Int16 _subitem ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getAttributeName() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setAttributeName( const ::rtl::OUString& _attributename ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > SAL_CALL getValues() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setValues( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& _values ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< double > SAL_CALL getKeyTimes() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setKeyTimes( const ::com::sun::star::uno::Sequence< double >& _keytimes ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getValueType() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setValueType( ::sal_Int16 _valuetype ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getCalcMode() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setCalcMode( ::sal_Int16 _calcmode ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL getAccumulate() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setAccumulate( ::sal_Bool _accumulate ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getAdditive() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setAdditive( ::sal_Int16 _additive ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Any SAL_CALL getFrom() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setFrom( const ::com::sun::star::uno::Any& _from ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Any SAL_CALL getTo() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setTo( const ::com::sun::star::uno::Any& _to ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Any SAL_CALL getBy() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setBy( const ::com::sun::star::uno::Any& _by ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::animations::TimeFilterPair > SAL_CALL getTimeFilter() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setTimeFilter( const ::com::sun::star::uno::Sequence< ::com::sun::star::animations::TimeFilterPair >& _timefilter ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getFormula() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setFormula( const ::rtl::OUString& _formula ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::animations::XAnimate >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_ANIMATIONS_XANIMATE_HDL
