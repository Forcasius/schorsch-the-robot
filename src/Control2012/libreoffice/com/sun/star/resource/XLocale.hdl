#ifndef INCLUDED_COM_SUN_STAR_RESOURCE_XLOCALE_HDL
#define INCLUDED_COM_SUN_STAR_RESOURCE_XLOCALE_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/resource/MissingResourceException.hdl"
#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace resource {

class SAL_NO_VTABLE XLocale : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::lang::Locale SAL_CALL create( const ::rtl::OUString& aLanguage, const ::rtl::OUString& aCountry, const ::rtl::OUString& aVariant ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::lang::Locale SAL_CALL getDefault(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setDefault( const ::com::sun::star::lang::Locale& newLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::lang::Locale > SAL_CALL getAvailableLocales(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getISOCountries(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getISOLanguages(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getLanguagesForCountry( const ::rtl::OUString& country ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getISO3Language( const ::com::sun::star::lang::Locale& locale ) throw (::com::sun::star::resource::MissingResourceException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getISO3Country( const ::com::sun::star::lang::Locale& locale ) throw (::com::sun::star::resource::MissingResourceException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayLanguage_Default( const ::com::sun::star::lang::Locale& locale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayLanguage( const ::com::sun::star::lang::Locale& locale, const ::com::sun::star::lang::Locale& inLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayCountry_Default( const ::com::sun::star::lang::Locale& locale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayCountry( const ::com::sun::star::lang::Locale& locale, const ::com::sun::star::lang::Locale& inLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayVariant_Default( const ::com::sun::star::lang::Locale& locale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayVariant( const ::com::sun::star::lang::Locale& locale, const ::com::sun::star::lang::Locale& inLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayName_Default( const ::com::sun::star::lang::Locale& locale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayName( const ::com::sun::star::lang::Locale& locale, const ::com::sun::star::lang::Locale& inLocale ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL equals( const ::com::sun::star::lang::Locale& l1, const ::com::sun::star::lang::Locale& l2 ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::resource::XLocale >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_RESOURCE_XLOCALE_HDL
