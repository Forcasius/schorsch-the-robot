#ifndef INCLUDED_COM_SUN_STAR_SECURITY_XCERTIFICATE_HDL
#define INCLUDED_COM_SUN_STAR_SECURITY_XCERTIFICATE_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace security { class XCertificateExtension; } } } }
#include "com/sun/star/util/DateTime.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace security {

class SAL_NO_VTABLE XCertificate : public ::com::sun::star::uno::XInterface
{
public:

    // Attributes
    virtual ::sal_Int16 SAL_CALL getVersion() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int8 > SAL_CALL getSerialNumber() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getIssuerName() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getSubjectName() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::util::DateTime SAL_CALL getNotValidBefore() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::util::DateTime SAL_CALL getNotValidAfter() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int8 > SAL_CALL getIssuerUniqueID() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int8 > SAL_CALL getSubjectUniqueID() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificateExtension > > SAL_CALL getExtensions() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int8 > SAL_CALL getEncoded() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getSubjectPublicKeyAlgorithm() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int8 > SAL_CALL getSubjectPublicKeyValue() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getSignatureAlgorithm() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int8 > SAL_CALL getSHA1Thumbprint() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int8 > SAL_CALL getMD5Thumbprint() throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificateExtension > SAL_CALL findCertificateExtension( const ::com::sun::star::uno::Sequence< ::sal_Int8 >& oid ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getCertificateUsage(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::security::XCertificate >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SECURITY_XCERTIFICATE_HDL
