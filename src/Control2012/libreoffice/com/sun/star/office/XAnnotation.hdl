#ifndef INCLUDED_COM_SUN_STAR_OFFICE_XANNOTATION_HDL
#define INCLUDED_COM_SUN_STAR_OFFICE_XANNOTATION_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace text { class XText; } } } }
#include "com/sun/star/util/DateTime.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/geometry/RealSize2D.hdl"
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/beans/XPropertySet.hdl"
#include "com/sun/star/geometry/RealPoint2D.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace office {

class SAL_NO_VTABLE XAnnotation : public ::com::sun::star::beans::XPropertySet, public ::com::sun::star::lang::XComponent
{
public:

    // Attributes
    virtual ::com::sun::star::uno::Any SAL_CALL getAnchor() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::geometry::RealPoint2D SAL_CALL getPosition() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPosition( const ::com::sun::star::geometry::RealPoint2D& _position ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::geometry::RealSize2D SAL_CALL getSize() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setSize( const ::com::sun::star::geometry::RealSize2D& _size ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getAuthor() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setAuthor( const ::rtl::OUString& _author ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::util::DateTime SAL_CALL getDateTime() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setDateTime( const ::com::sun::star::util::DateTime& _datetime ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::text::XText > SAL_CALL getTextRange() throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::office::XAnnotation >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_OFFICE_XANNOTATION_HDL
