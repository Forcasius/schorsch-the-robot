#ifndef INCLUDED_COM_SUN_STAR_DOCUMENT_DOCUMENTEVENT_HDL
#define INCLUDED_COM_SUN_STAR_DOCUMENT_DOCUMENTEVENT_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace frame { class XController2; } } } }
#include "com/sun/star/lang/EventObject.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace document {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct DocumentEvent: public ::com::sun::star::lang::EventObject {
    inline DocumentEvent() SAL_THROW(());

    inline DocumentEvent(const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Source_, const ::rtl::OUString& EventName_, const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XController2 >& ViewController_, const ::com::sun::star::uno::Any& Supplement_) SAL_THROW(());

    ::rtl::OUString EventName CPPU_GCC3_ALIGN(::com::sun::star::lang::EventObject);
    ::com::sun::star::uno::Reference< ::com::sun::star::frame::XController2 > ViewController;
    ::com::sun::star::uno::Any Supplement;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::document::DocumentEvent* );

#endif // INCLUDED_COM_SUN_STAR_DOCUMENT_DOCUMENTEVENT_HDL
