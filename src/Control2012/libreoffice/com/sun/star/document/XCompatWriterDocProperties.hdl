#ifndef INCLUDED_COM_SUN_STAR_DOCUMENT_XCOMPATWRITERDOCPROPERTIES_HDL
#define INCLUDED_COM_SUN_STAR_DOCUMENT_XCOMPATWRITERDOCPROPERTIES_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace document {

class SAL_NO_VTABLE XCompatWriterDocProperties : public ::com::sun::star::uno::XInterface
{
public:

    // Attributes
    virtual ::rtl::OUString SAL_CALL getManager() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setManager( const ::rtl::OUString& _manager ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getCategory() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setCategory( const ::rtl::OUString& _category ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getCompany() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setCompany( const ::rtl::OUString& _company ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::document::XCompatWriterDocProperties >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_DOCUMENT_XCOMPATWRITERDOCPROPERTIES_HDL
