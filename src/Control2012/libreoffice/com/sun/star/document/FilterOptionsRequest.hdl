#ifndef INCLUDED_COM_SUN_STAR_DOCUMENT_FILTEROPTIONSREQUEST_HDL
#define INCLUDED_COM_SUN_STAR_DOCUMENT_FILTEROPTIONSREQUEST_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/uno/Exception.hdl"
namespace com { namespace sun { namespace star { namespace frame { class XModel; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace document {

class CPPU_GCC_DLLPUBLIC_EXPORT FilterOptionsRequest : public ::com::sun::star::uno::Exception
{
public:
    inline CPPU_GCC_DLLPRIVATE FilterOptionsRequest() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE FilterOptionsRequest(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >& rModel_, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& rProperties_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE FilterOptionsRequest(FilterOptionsRequest const &);

    inline CPPU_GCC_DLLPRIVATE ~FilterOptionsRequest();

    inline CPPU_GCC_DLLPRIVATE FilterOptionsRequest & operator =(FilterOptionsRequest const &);

    ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel > rModel CPPU_GCC3_ALIGN( ::com::sun::star::uno::Exception );
    ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue > rProperties;
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::document::FilterOptionsRequest* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_DOCUMENT_FILTEROPTIONSREQUEST_HDL
