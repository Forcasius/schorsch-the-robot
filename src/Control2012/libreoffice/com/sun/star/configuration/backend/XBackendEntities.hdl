#ifndef INCLUDED_COM_SUN_STAR_CONFIGURATION_BACKEND_XBACKENDENTITIES_HDL
#define INCLUDED_COM_SUN_STAR_CONFIGURATION_BACKEND_XBACKENDENTITIES_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/configuration/backend/BackendAccessException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace configuration { namespace backend {

class SAL_NO_VTABLE XBackendEntities : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL getOwnerEntity(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::rtl::OUString SAL_CALL getAdminEntity(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL supportsEntity( const ::rtl::OUString& aEntity ) throw (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isEqualEntity( const ::rtl::OUString& aEntity, const ::rtl::OUString& aOtherEntity ) throw (::com::sun::star::configuration::backend::BackendAccessException, ::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::configuration::backend::XBackendEntities >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_CONFIGURATION_BACKEND_XBACKENDENTITIES_HDL
