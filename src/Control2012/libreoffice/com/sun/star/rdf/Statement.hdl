#ifndef INCLUDED_COM_SUN_STAR_RDF_STATEMENT_HDL
#define INCLUDED_COM_SUN_STAR_RDF_STATEMENT_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace rdf { class XNode; } } } }
namespace com { namespace sun { namespace star { namespace rdf { class XResource; } } } }
namespace com { namespace sun { namespace star { namespace rdf { class XURI; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace rdf {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct Statement {
    inline Statement() SAL_THROW(());

    inline Statement(const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XResource >& Subject_, const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XURI >& Predicate_, const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XNode >& Object_, const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XURI >& Graph_) SAL_THROW(());

    ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XResource > Subject;
    ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XURI > Predicate;
    ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XNode > Object;
    ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XURI > Graph;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::rdf::Statement* );

#endif // INCLUDED_COM_SUN_STAR_RDF_STATEMENT_HDL
