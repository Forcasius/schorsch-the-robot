#ifndef INCLUDED_COM_SUN_STAR_RDF_XDOCUMENTREPOSITORY_HDL
#define INCLUDED_COM_SUN_STAR_RDF_XDOCUMENTREPOSITORY_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace container { class XEnumeration; } } } }
#include "com/sun/star/rdf/XRepository.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/beans/Pair.hdl"
#include "com/sun/star/rdf/RepositoryException.hdl"
namespace com { namespace sun { namespace star { namespace rdf { class XNode; } } } }
#include "com/sun/star/lang/IllegalArgumentException.hdl"
namespace com { namespace sun { namespace star { namespace rdf { class XMetadatable; } } } }
namespace com { namespace sun { namespace star { namespace rdf { class XResource; } } } }
#include "com/sun/star/rdf/Statement.hdl"
namespace com { namespace sun { namespace star { namespace rdf { class XURI; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace rdf {

class SAL_NO_VTABLE XDocumentRepository : public ::com::sun::star::rdf::XRepository
{
public:

    // Methods
    virtual void SAL_CALL setStatementRDFa( const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XResource >& Subject, const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XURI > >& Predicates, const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XMetadatable >& Object, const ::rtl::OUString& RDFaContent, const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XURI >& RDFaDatatype ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::rdf::RepositoryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeStatementRDFa( const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XMetadatable >& Element ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::rdf::RepositoryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::beans::Pair< ::com::sun::star::uno::Sequence< ::com::sun::star::rdf::Statement >, ::sal_Bool > SAL_CALL getStatementRDFa( const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XMetadatable >& Element ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::rdf::RepositoryException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::container::XEnumeration > SAL_CALL getStatementsRDFa( const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XResource >& Subject, const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XURI >& Predicate, const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XNode >& Object ) throw (::com::sun::star::rdf::RepositoryException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::rdf::XDocumentRepository >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_RDF_XDOCUMENTREPOSITORY_HDL
