#ifndef INCLUDED_COM_SUN_STAR_TEST_PERFORMANCE_COMPLEXTYPES_HDL
#define INCLUDED_COM_SUN_STAR_TEST_PERFORMANCE_COMPLEXTYPES_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace uno { class XInterface; } } } }
#include "com/sun/star/test/performance/SimpleTypes.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace test { namespace performance {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct ComplexTypes: public ::com::sun::star::test::performance::SimpleTypes {
    inline ComplexTypes() SAL_THROW(());

    inline ComplexTypes(const ::sal_Bool& Bool_, const ::sal_Unicode& Char_, const ::sal_Int8& Byte_, const ::sal_Int16& Short_, const ::sal_uInt16& UShort_, const ::sal_Int32& Long_, const ::sal_uInt32& ULong_, const ::sal_Int64& Hyper_, const ::sal_uInt64& UHyper_, const float& Float_, const double& Double_, const ::com::sun::star::uno::Sequence< ::sal_Int32 >& Sequence_, const ::rtl::OUString& String_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Interface_, const ::com::sun::star::uno::Any& Any_) SAL_THROW(());

    ::com::sun::star::uno::Sequence< ::sal_Int32 > Sequence CPPU_GCC3_ALIGN(::com::sun::star::test::performance::SimpleTypes);
    ::rtl::OUString String;
    ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > Interface;
    ::com::sun::star::uno::Any Any;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::test::performance::ComplexTypes* );

#endif // INCLUDED_COM_SUN_STAR_TEST_PERFORMANCE_COMPLEXTYPES_HDL
