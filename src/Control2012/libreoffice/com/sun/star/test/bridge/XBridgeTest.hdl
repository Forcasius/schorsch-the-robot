#ifndef INCLUDED_COM_SUN_STAR_TEST_BRIDGE_XBRIDGETEST_HDL
#define INCLUDED_COM_SUN_STAR_TEST_BRIDGE_XBRIDGETEST_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
namespace com { namespace sun { namespace star { namespace uno { class XInterface; } } } }
#include "com/sun/star/test/bridge/TestData.hdl"
#include "com/sun/star/test/bridge/XBridgeTestBase.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace test { namespace bridge {

class SAL_NO_VTABLE XBridgeTest : public ::com::sun::star::test::bridge::XBridgeTestBase
{
public:

    // Attributes
    virtual ::sal_Int32 SAL_CALL getRuntimeException() throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setRuntimeException( ::sal_Int32 _runtimeexception ) throw (::com::sun::star::uno::RuntimeException) = 0;

    // Methods
    virtual ::com::sun::star::test::bridge::TestDataElements SAL_CALL raiseException( ::sal_Int16 ArgumentPosition, const ::rtl::OUString& Message, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL raiseRuntimeExceptionOneway( const ::rtl::OUString& Message, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::test::bridge::XBridgeTest >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_TEST_BRIDGE_XBRIDGETEST_HDL
