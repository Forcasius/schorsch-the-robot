#ifndef INCLUDED_COM_SUN_STAR_TEST_BRIDGE_XBRIDGETEST2_HDL
#define INCLUDED_COM_SUN_STAR_TEST_BRIDGE_XBRIDGETEST2_HDL

#include "sal/config.h"

#include "com/sun/star/test/bridge/TestElement.hdl"
namespace com { namespace sun { namespace star { namespace uno { class XInterface; } } } }
#include "com/sun/star/test/bridge/TestEnum.hdl"
#include "com/sun/star/test/bridge/XBridgeTest.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace test { namespace bridge {

class SAL_NO_VTABLE XBridgeTest2 : public ::com::sun::star::test::bridge::XBridgeTest
{
public:

    // Methods
    virtual ::com::sun::star::uno::Sequence< ::sal_Bool > SAL_CALL setSequenceBool( const ::com::sun::star::uno::Sequence< ::sal_Bool >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Unicode > SAL_CALL setSequenceChar( const ::com::sun::star::uno::Sequence< ::sal_Unicode >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int8 > SAL_CALL setSequenceByte( const ::com::sun::star::uno::Sequence< ::sal_Int8 >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int16 > SAL_CALL setSequenceShort( const ::com::sun::star::uno::Sequence< ::sal_Int16 >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_uInt16 > SAL_CALL setSequenceUShort( const ::com::sun::star::uno::Sequence< ::sal_uInt16 >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int32 > SAL_CALL setSequenceLong( const ::com::sun::star::uno::Sequence< ::sal_Int32 >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_uInt32 > SAL_CALL setSequenceULong( const ::com::sun::star::uno::Sequence< ::sal_uInt32 >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int64 > SAL_CALL setSequenceHyper( const ::com::sun::star::uno::Sequence< ::sal_Int64 >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_uInt64 > SAL_CALL setSequenceUHyper( const ::com::sun::star::uno::Sequence< ::sal_uInt64 >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< float > SAL_CALL setSequenceFloat( const ::com::sun::star::uno::Sequence< float >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< double > SAL_CALL setSequenceDouble( const ::com::sun::star::uno::Sequence< double >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::test::bridge::TestEnum > SAL_CALL setSequenceEnum( const ::com::sun::star::uno::Sequence< ::com::sun::star::test::bridge::TestEnum >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL setSequenceString( const ::com::sun::star::uno::Sequence< ::rtl::OUString >& aString ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > > SAL_CALL setSequenceXInterface( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any > SAL_CALL setSequenceAny( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::test::bridge::TestElement > SAL_CALL setSequenceStruct( const ::com::sun::star::uno::Sequence< ::com::sun::star::test::bridge::TestElement >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::sal_Int32 > > SAL_CALL setDim2( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::sal_Int32 > >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::sal_Int32 > > > SAL_CALL setDim3( const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::sal_Int32 > > >& aSeq ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setSequencesInOut( ::com::sun::star::uno::Sequence< ::sal_Bool >& aSeqBoolean, ::com::sun::star::uno::Sequence< ::sal_Unicode >& aSeqChar, ::com::sun::star::uno::Sequence< ::sal_Int8 >& aSeqByte, ::com::sun::star::uno::Sequence< ::sal_Int16 >& aSeqShort, ::com::sun::star::uno::Sequence< ::sal_uInt16 >& aSeqUShort, ::com::sun::star::uno::Sequence< ::sal_Int32 >& aSeqLong, ::com::sun::star::uno::Sequence< ::sal_uInt32 >& aSeqULong, ::com::sun::star::uno::Sequence< ::sal_Int64 >& aSeqHyper, ::com::sun::star::uno::Sequence< ::sal_uInt64 >& aSeqUHyper, ::com::sun::star::uno::Sequence< float >& aSeqFloat, ::com::sun::star::uno::Sequence< double >& aSeqDouble, ::com::sun::star::uno::Sequence< ::com::sun::star::test::bridge::TestEnum >& aSeqEnum, ::com::sun::star::uno::Sequence< ::rtl::OUString >& aSeqString, ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& aSeqXInterface, ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aSeqAny, ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::sal_Int32 > >& aSeqDim2, ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::sal_Int32 > > >& aSeqDim3 ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setSequencesOut( ::com::sun::star::uno::Sequence< ::sal_Bool >& aSeqBoolean, ::com::sun::star::uno::Sequence< ::sal_Unicode >& aSeqChar, ::com::sun::star::uno::Sequence< ::sal_Int8 >& aSeqByte, ::com::sun::star::uno::Sequence< ::sal_Int16 >& aSeqShort, ::com::sun::star::uno::Sequence< ::sal_uInt16 >& aSeqUShort, ::com::sun::star::uno::Sequence< ::sal_Int32 >& aSeqLong, ::com::sun::star::uno::Sequence< ::sal_uInt32 >& aSeqULong, ::com::sun::star::uno::Sequence< ::sal_Int64 >& aSeqHyper, ::com::sun::star::uno::Sequence< ::sal_uInt64 >& aSeqUHyper, ::com::sun::star::uno::Sequence< float >& aSeqFloat, ::com::sun::star::uno::Sequence< double >& aSeqDouble, ::com::sun::star::uno::Sequence< ::com::sun::star::test::bridge::TestEnum >& aSeqEnum, ::com::sun::star::uno::Sequence< ::rtl::OUString >& aSeqString, ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface > >& aSeqXInterface, ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& aSeqAny, ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::sal_Int32 > >& aSeqDim2, ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence< ::sal_Int32 > > >& aSeqDim3 ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::test::bridge::XBridgeTest2 >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_TEST_BRIDGE_XBRIDGETEST2_HDL
