#ifndef INCLUDED_COM_SUN_STAR_SDBC_DATATRUNCATION_HDL
#define INCLUDED_COM_SUN_STAR_SDBC_DATATRUNCATION_HDL

#include "sal/config.h"

#include "com/sun/star/sdbc/SQLWarning.hdl"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace sdbc {

class CPPU_GCC_DLLPUBLIC_EXPORT DataTruncation : public ::com::sun::star::sdbc::SQLWarning
{
public:
    inline CPPU_GCC_DLLPRIVATE DataTruncation() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE DataTruncation(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::rtl::OUString& SQLState_, const ::sal_Int32& ErrorCode_, const ::com::sun::star::uno::Any& NextException_, const ::sal_Int32& Index_, const ::sal_Bool& IsParameter_, const ::sal_Bool& DuringRead_, const ::sal_Int32& DataSize_, const ::sal_Int32& TransferSize_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE DataTruncation(DataTruncation const &);

    inline CPPU_GCC_DLLPRIVATE ~DataTruncation();

    inline CPPU_GCC_DLLPRIVATE DataTruncation & operator =(DataTruncation const &);

    ::sal_Int32 Index CPPU_GCC3_ALIGN( ::com::sun::star::sdbc::SQLWarning );
    ::sal_Bool IsParameter;
    ::sal_Bool DuringRead;
    ::sal_Int32 DataSize;
    ::sal_Int32 TransferSize;
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::sdbc::DataTruncation* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SDBC_DATATRUNCATION_HDL
