#ifndef INCLUDED_COM_SUN_STAR_XFORMS_XMODEL_HDL
#define INCLUDED_COM_SUN_STAR_XFORMS_XMODEL_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace beans { class XPropertySet; } } } }
namespace com { namespace sun { namespace star { namespace xforms { class XSubmission; } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XDocument; } } } } }
namespace com { namespace sun { namespace star { namespace xforms { class XDataTypeRepository; } } } }
namespace com { namespace sun { namespace star { namespace task { class XInteractionHandler; } } } }
#include "com/sun/star/util/VetoException.hdl"
#include "com/sun/star/lang/WrappedTargetException.hdl"
namespace com { namespace sun { namespace star { namespace container { class XSet; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace xforms {

class SAL_NO_VTABLE XModel : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL getID(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setID( const ::rtl::OUString& id ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL initialize(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL rebuild(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL recalculate(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL revalidate(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL refresh(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL submit( const ::rtl::OUString& id ) throw (::com::sun::star::util::VetoException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL submitWithInteraction( const ::rtl::OUString& id, const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionHandler >& aHandler ) throw (::com::sun::star::util::VetoException, ::com::sun::star::lang::WrappedTargetException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xforms::XDataTypeRepository > SAL_CALL getDataTypeRepository(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::container::XSet > SAL_CALL getInstances(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocument > SAL_CALL getInstanceDocument( const ::rtl::OUString& id ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XDocument > SAL_CALL getDefaultInstance(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > SAL_CALL createBinding(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > SAL_CALL cloneBinding( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& binding ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet > SAL_CALL getBinding( const ::rtl::OUString& id ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::container::XSet > SAL_CALL getBindings(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xforms::XSubmission > SAL_CALL createSubmission(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xforms::XSubmission > SAL_CALL cloneSubmission( const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >& submission ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::xforms::XSubmission > SAL_CALL getSubmission( const ::rtl::OUString& id ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::container::XSet > SAL_CALL getSubmissions(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::xforms::XModel >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_XFORMS_XMODEL_HDL
