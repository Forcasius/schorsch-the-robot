#ifndef INCLUDED_COM_SUN_STAR_DEPLOYMENT_DEPENDENCYEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_DEPLOYMENT_DEPENDENCYEXCEPTION_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace xml { namespace dom { class XElement; } } } } }
#include "com/sun/star/uno/Exception.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace deployment {

class CPPU_GCC_DLLPUBLIC_EXPORT DependencyException : public ::com::sun::star::uno::Exception
{
public:
    inline CPPU_GCC_DLLPRIVATE DependencyException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE DependencyException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XElement > >& UnsatisfiedDependencies_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE DependencyException(DependencyException const &);

    inline CPPU_GCC_DLLPRIVATE ~DependencyException();

    inline CPPU_GCC_DLLPRIVATE DependencyException & operator =(DependencyException const &);

    ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::xml::dom::XElement > > UnsatisfiedDependencies CPPU_GCC3_ALIGN( ::com::sun::star::uno::Exception );
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::deployment::DependencyException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_DEPLOYMENT_DEPENDENCYEXCEPTION_HDL
