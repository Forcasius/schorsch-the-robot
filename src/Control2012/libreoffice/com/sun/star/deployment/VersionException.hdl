#ifndef INCLUDED_COM_SUN_STAR_DEPLOYMENT_VERSIONEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_DEPLOYMENT_VERSIONEXCEPTION_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace deployment { class XPackage; } } } }
#include "com/sun/star/uno/Exception.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace deployment {

class CPPU_GCC_DLLPUBLIC_EXPORT VersionException : public ::com::sun::star::uno::Exception
{
public:
    inline CPPU_GCC_DLLPRIVATE VersionException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE VersionException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::rtl::OUString& NewVersion_, const ::rtl::OUString& NewDisplayName_, const ::com::sun::star::uno::Reference< ::com::sun::star::deployment::XPackage >& Deployed_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE VersionException(VersionException const &);

    inline CPPU_GCC_DLLPRIVATE ~VersionException();

    inline CPPU_GCC_DLLPRIVATE VersionException & operator =(VersionException const &);

    ::rtl::OUString NewVersion CPPU_GCC3_ALIGN( ::com::sun::star::uno::Exception );
    ::rtl::OUString NewDisplayName;
    ::com::sun::star::uno::Reference< ::com::sun::star::deployment::XPackage > Deployed;
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::deployment::VersionException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_DEPLOYMENT_VERSIONEXCEPTION_HDL
