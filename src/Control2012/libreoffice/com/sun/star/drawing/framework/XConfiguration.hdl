#ifndef INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XCONFIGURATION_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XCONFIGURATION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/util/XCloneable.hdl"
#include "com/sun/star/drawing/framework/AnchorBindingMode.hdl"
namespace com { namespace sun { namespace star { namespace drawing { namespace framework { class XResourceId; } } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace drawing { namespace framework {

class SAL_NO_VTABLE XConfiguration : public ::com::sun::star::util::XCloneable
{
public:

    // Methods
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::drawing::framework::XResourceId > > SAL_CALL getResources( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::framework::XResourceId >& xAnchorId, const ::rtl::OUString& sTargetURLPrefix, ::com::sun::star::drawing::framework::AnchorBindingMode eSearchMode ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL hasResource( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::framework::XResourceId >& xResourceId ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL addResource( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::framework::XResourceId >& xResourceId ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeResource( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::framework::XResourceId >& xResource ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::framework::XConfiguration >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XCONFIGURATION_HDL
