#ifndef INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XPANEBORDERPAINTER_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XPANEBORDERPAINTER_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Point.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XCanvas; } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/drawing/framework/BorderType.hdl"
#include "com/sun/star/awt/Rectangle.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace drawing { namespace framework {

class SAL_NO_VTABLE XPaneBorderPainter : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::awt::Rectangle SAL_CALL addBorder( const ::rtl::OUString& sPaneBorderStyleName, const ::com::sun::star::awt::Rectangle& aRectangle, ::com::sun::star::drawing::framework::BorderType eBorderType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::awt::Rectangle SAL_CALL removeBorder( const ::rtl::OUString& sPaneBorderStyleName, const ::com::sun::star::awt::Rectangle& aRectangle, ::com::sun::star::drawing::framework::BorderType eBorderType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL paintBorder( const ::rtl::OUString& sPaneBorderStyleName, const ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XCanvas >& xCanvas, const ::com::sun::star::awt::Rectangle& aOuterBorderRectangle, const ::com::sun::star::awt::Rectangle& aRepaintArea, const ::rtl::OUString& sTitle ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL paintBorderWithCallout( const ::rtl::OUString& sPaneBorderStyleName, const ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XCanvas >& xCanvas, const ::com::sun::star::awt::Rectangle& aOuterBorderRectangle, const ::com::sun::star::awt::Rectangle& aRepaintArea, const ::rtl::OUString& sTitle, const ::com::sun::star::awt::Point& aCalloutAnchor ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::awt::Point SAL_CALL getCalloutOffset( const ::rtl::OUString& sPaneBorderStyleName ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::framework::XPaneBorderPainter >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XPANEBORDERPAINTER_HDL
