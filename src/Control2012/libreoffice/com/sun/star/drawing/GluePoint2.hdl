#ifndef INCLUDED_COM_SUN_STAR_DRAWING_GLUEPOINT2_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_GLUEPOINT2_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Point.hdl"
#include "com/sun/star/drawing/EscapeDirection.hdl"
#include "com/sun/star/drawing/Alignment.hdl"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace drawing {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct GluePoint2 {
    inline GluePoint2() SAL_THROW(());

    inline GluePoint2(const ::com::sun::star::awt::Point& Position_, const ::sal_Bool& IsRelative_, const ::com::sun::star::drawing::Alignment& PositionAlignment_, const ::com::sun::star::drawing::EscapeDirection& Escape_, const ::sal_Bool& IsUserDefined_) SAL_THROW(());

    ::com::sun::star::awt::Point Position;
    ::sal_Bool IsRelative;
    ::com::sun::star::drawing::Alignment PositionAlignment;
    ::com::sun::star::drawing::EscapeDirection Escape;
    ::sal_Bool IsUserDefined;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::drawing::GluePoint2* );

#endif // INCLUDED_COM_SUN_STAR_DRAWING_GLUEPOINT2_HDL
