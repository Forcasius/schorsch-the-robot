#ifndef INCLUDED_COM_SUN_STAR_DRAWING_XSLIDERENDERER_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_XSLIDERENDERER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace rendering { class XBitmap; } } } }
#include "com/sun/star/awt/Size.hdl"
namespace com { namespace sun { namespace star { namespace drawing { class XDrawPage; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XCanvas; } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XBitmap; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace drawing {

class SAL_NO_VTABLE XSlideRenderer : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::awt::XBitmap > SAL_CALL createPreview( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage >& xSlide, const ::com::sun::star::awt::Size& aMaximumPreviewPixelSize, ::sal_Int16 nSuperSampleFactor ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XBitmap > SAL_CALL createPreviewForCanvas( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XDrawPage >& xSlide, const ::com::sun::star::awt::Size& aMaximumPreviewPixelSize, ::sal_Int16 nSuperSampleFactor, const ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XCanvas >& xCanvas ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::awt::Size SAL_CALL calculatePreviewSize( double nSlideAspectRatio, const ::com::sun::star::awt::Size& aMaximumPreviewPixelSize ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::drawing::XSlideRenderer >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_DRAWING_XSLIDERENDERER_HDL
