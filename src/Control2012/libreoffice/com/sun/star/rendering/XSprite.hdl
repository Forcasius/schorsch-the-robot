#ifndef INCLUDED_COM_SUN_STAR_RENDERING_XSPRITE_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_XSPRITE_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/geometry/AffineMatrix2D.hdl"
#include "com/sun/star/rendering/ViewState.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XPolyPolygon2D; } } } }
#include "com/sun/star/geometry/RealPoint2D.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/rendering/RenderState.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace rendering {

class SAL_NO_VTABLE XSprite : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL setAlpha( double nAlpha ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL move( const ::com::sun::star::geometry::RealPoint2D& aNewPos, const ::com::sun::star::rendering::ViewState& aViewState, const ::com::sun::star::rendering::RenderState& aRenderState ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL transform( const ::com::sun::star::geometry::AffineMatrix2D& aTransformation ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL clip( const ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XPolyPolygon2D >& aClip ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPriority( double nPriority ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL show(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL hide(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XSprite >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_RENDERING_XSPRITE_HDL
