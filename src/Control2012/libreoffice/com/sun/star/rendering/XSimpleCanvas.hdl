#ifndef INCLUDED_COM_SUN_STAR_RENDERING_XSIMPLECANVAS_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_XSIMPLECANVAS_HDL

#include "sal/config.h"

#include "com/sun/star/rendering/RenderState.hdl"
#include "com/sun/star/rendering/FontMetrics.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XCanvas; } } } }
#include "com/sun/star/geometry/AffineMatrix2D.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XCanvasFont; } } } }
#include "com/sun/star/rendering/ViewState.hdl"
#include "com/sun/star/rendering/StringContext.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XGraphicDevice; } } } }
#include "com/sun/star/util/Color.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XPolyPolygon2D; } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/geometry/RealPoint2D.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XBitmap; } } } }
#include "com/sun/star/geometry/RealRectangle2D.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace rendering {

class SAL_NO_VTABLE XSimpleCanvas : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL selectFont( const ::rtl::OUString& sFontName, double size, ::sal_Bool bold, ::sal_Bool italic ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setPenColor( ::sal_Int32 nsRgbaColor ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setFillColor( ::sal_Int32 nsRgbaColor ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setRectClip( const ::com::sun::star::geometry::RealRectangle2D& aRect ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setTransformation( const ::com::sun::star::geometry::AffineMatrix2D& aTransform ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL drawPixel( const ::com::sun::star::geometry::RealPoint2D& aPoint ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL drawLine( const ::com::sun::star::geometry::RealPoint2D& aStartPoint, const ::com::sun::star::geometry::RealPoint2D& aEndPoint ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL drawRect( const ::com::sun::star::geometry::RealRectangle2D& aRect ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL drawPolyPolygon( const ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XPolyPolygon2D >& xPolyPolygon ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL drawText( const ::com::sun::star::rendering::StringContext& aText, const ::com::sun::star::geometry::RealPoint2D& aOutPos, ::sal_Int8 nTextDirection ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL drawBitmap( const ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XBitmap >& xBitmap, const ::com::sun::star::geometry::RealPoint2D& aLeftTop ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XGraphicDevice > SAL_CALL getDevice(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XCanvas > SAL_CALL getCanvas(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::rendering::FontMetrics SAL_CALL getFontMetrics(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XCanvasFont > SAL_CALL getCurrentFont(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getCurrentPenColor(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int32 SAL_CALL getCurrentFillColor(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::geometry::RealRectangle2D SAL_CALL getCurrentClipRect(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::geometry::AffineMatrix2D SAL_CALL getCurrentTransformation(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::rendering::ViewState SAL_CALL getCurrentViewState(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::rendering::RenderState SAL_CALL getCurrentRenderState( ::sal_Bool bUseFillColor ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XSimpleCanvas >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_RENDERING_XSIMPLECANVAS_HDL
