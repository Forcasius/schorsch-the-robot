#ifndef INCLUDED_COM_SUN_STAR_RENDERING_FLOATINGPOINTBITMAPLAYOUT_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_FLOATINGPOINTBITMAPLAYOUT_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace rendering { class XColorSpace; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace rendering {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct FloatingPointBitmapLayout {
    inline FloatingPointBitmapLayout() SAL_THROW(());

    inline FloatingPointBitmapLayout(const ::sal_Int32& ScanLines_, const ::sal_Int32& ScanLineBytes_, const ::sal_Int32& ScanLineStride_, const ::sal_Int32& PlaneStride_, const ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XColorSpace >& ColorSpace_, const ::sal_Int32& NumComponents_, const ::sal_Int8& Endianness_, const ::sal_Int8& Format_) SAL_THROW(());

    ::sal_Int32 ScanLines;
    ::sal_Int32 ScanLineBytes;
    ::sal_Int32 ScanLineStride;
    ::sal_Int32 PlaneStride;
    ::com::sun::star::uno::Reference< ::com::sun::star::rendering::XColorSpace > ColorSpace;
    ::sal_Int32 NumComponents;
    ::sal_Int8 Endianness;
    ::sal_Int8 Format;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::rendering::FloatingPointBitmapLayout* );

#endif // INCLUDED_COM_SUN_STAR_RENDERING_FLOATINGPOINTBITMAPLAYOUT_HDL
