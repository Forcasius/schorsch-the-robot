#ifndef INCLUDED_COM_SUN_STAR_RENDERING_FONTINFO_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_FONTINFO_HDL

#include "sal/config.h"

#include "com/sun/star/util/TriState.hdl"
#include "com/sun/star/rendering/Panose.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace rendering {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct FontInfo {
    inline FontInfo() SAL_THROW(());

    inline FontInfo(const ::com::sun::star::rendering::Panose& FontDescription_, const ::rtl::OUString& FamilyName_, const ::rtl::OUString& StyleName_, const ::sal_Int32& UnicodeRanges0_, const ::sal_Int32& UnicodeRanges1_, const ::sal_Int32& UnicodeRanges2_, const ::sal_Int32& UnicodeRanges3_, const ::com::sun::star::util::TriState& IsSymbolFont_, const ::com::sun::star::util::TriState& IsVertical_) SAL_THROW(());

    ::com::sun::star::rendering::Panose FontDescription;
    ::rtl::OUString FamilyName;
    ::rtl::OUString StyleName;
    ::sal_Int32 UnicodeRanges0;
    ::sal_Int32 UnicodeRanges1;
    ::sal_Int32 UnicodeRanges2;
    ::sal_Int32 UnicodeRanges3;
    ::com::sun::star::util::TriState IsSymbolFont;
    ::com::sun::star::util::TriState IsVertical;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::rendering::FontInfo* );

#endif // INCLUDED_COM_SUN_STAR_RENDERING_FONTINFO_HDL
