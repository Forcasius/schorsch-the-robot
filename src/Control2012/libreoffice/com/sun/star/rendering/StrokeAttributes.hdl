#ifndef INCLUDED_COM_SUN_STAR_RENDERING_STROKEATTRIBUTES_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_STROKEATTRIBUTES_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace rendering {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct StrokeAttributes {
    inline StrokeAttributes() SAL_THROW(());

    inline StrokeAttributes(const double& StrokeWidth_, const double& MiterLimit_, const ::com::sun::star::uno::Sequence< double >& DashArray_, const ::com::sun::star::uno::Sequence< double >& LineArray_, const ::sal_Int8& StartCapType_, const ::sal_Int8& EndCapType_, const ::sal_Int8& JoinType_) SAL_THROW(());

    double StrokeWidth;
    double MiterLimit;
    ::com::sun::star::uno::Sequence< double > DashArray;
    ::com::sun::star::uno::Sequence< double > LineArray;
    ::sal_Int8 StartCapType;
    ::sal_Int8 EndCapType;
    ::sal_Int8 JoinType;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::rendering::StrokeAttributes* );

#endif // INCLUDED_COM_SUN_STAR_RENDERING_STROKEATTRIBUTES_HDL
