#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_SCRIPTEVENT_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_SCRIPTEVENT_HDL

#include "sal/config.h"

#include "com/sun/star/script/AllEventObject.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace script {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct ScriptEvent: public ::com::sun::star::script::AllEventObject {
    inline ScriptEvent() SAL_THROW(());

    inline ScriptEvent(const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Source_, const ::com::sun::star::uno::Any& Helper_, const ::com::sun::star::uno::Type& ListenerType_, const ::rtl::OUString& MethodName_, const ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Any >& Arguments_, const ::rtl::OUString& ScriptType_, const ::rtl::OUString& ScriptCode_) SAL_THROW(());

    ::rtl::OUString ScriptType CPPU_GCC3_ALIGN(::com::sun::star::script::AllEventObject);
    ::rtl::OUString ScriptCode;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::script::ScriptEvent* );

#endif // INCLUDED_COM_SUN_STAR_SCRIPT_SCRIPTEVENT_HDL
