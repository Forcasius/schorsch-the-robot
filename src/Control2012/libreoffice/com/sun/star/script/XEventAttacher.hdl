#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_XEVENTATTACHER_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_XEVENTATTACHER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/lang/ServiceNotRegisteredException.hdl"
#include "com/sun/star/script/CannotCreateAdapterException.hdl"
namespace com { namespace sun { namespace star { namespace script { class XAllListener; } } } }
#include "com/sun/star/lang/IllegalArgumentException.hdl"
namespace com { namespace sun { namespace star { namespace lang { class XEventListener; } } } }
#include "com/sun/star/beans/IntrospectionException.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace script {

class SAL_NO_VTABLE XEventAttacher : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::lang::XEventListener > SAL_CALL attachListener( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& xTarget, const ::com::sun::star::uno::Reference< ::com::sun::star::script::XAllListener >& xAllListener, const ::com::sun::star::uno::Any& aHelper, const ::rtl::OUString& aListenerType, const ::rtl::OUString& aAddListenerParam ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::beans::IntrospectionException, ::com::sun::star::script::CannotCreateAdapterException, ::com::sun::star::lang::ServiceNotRegisteredException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::lang::XEventListener > SAL_CALL attachSingleEventListener( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& xTarget, const ::com::sun::star::uno::Reference< ::com::sun::star::script::XAllListener >& xAllListener, const ::com::sun::star::uno::Any& aHelper, const ::rtl::OUString& aListenerType, const ::rtl::OUString& aAddListenerParam, const ::rtl::OUString& aEventMethod ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::beans::IntrospectionException, ::com::sun::star::script::CannotCreateAdapterException, ::com::sun::star::lang::ServiceNotRegisteredException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeListener( const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& xTarget, const ::rtl::OUString& aListenerType, const ::rtl::OUString& aRemoveListenerParam, const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XEventListener >& xToRemoveListener ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::beans::IntrospectionException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::script::XEventAttacher >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SCRIPT_XEVENTATTACHER_HDL
