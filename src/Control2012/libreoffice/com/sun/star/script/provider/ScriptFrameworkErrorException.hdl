#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_PROVIDER_SCRIPTFRAMEWORKERROREXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_PROVIDER_SCRIPTFRAMEWORKERROREXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Exception.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace script { namespace provider {

class CPPU_GCC_DLLPUBLIC_EXPORT ScriptFrameworkErrorException : public ::com::sun::star::uno::Exception
{
public:
    inline CPPU_GCC_DLLPRIVATE ScriptFrameworkErrorException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE ScriptFrameworkErrorException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::rtl::OUString& scriptName_, const ::rtl::OUString& language_, const ::sal_Int32& errorType_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE ScriptFrameworkErrorException(ScriptFrameworkErrorException const &);

    inline CPPU_GCC_DLLPRIVATE ~ScriptFrameworkErrorException();

    inline CPPU_GCC_DLLPRIVATE ScriptFrameworkErrorException & operator =(ScriptFrameworkErrorException const &);

    ::rtl::OUString scriptName CPPU_GCC3_ALIGN( ::com::sun::star::uno::Exception );
    ::rtl::OUString language;
    ::sal_Int32 errorType;
};

} } } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::script::provider::ScriptFrameworkErrorException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SCRIPT_PROVIDER_SCRIPTFRAMEWORKERROREXCEPTION_HDL
