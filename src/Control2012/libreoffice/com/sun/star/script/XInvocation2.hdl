#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_XINVOCATION2_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_XINVOCATION2_HDL

#include "sal/config.h"

#include "com/sun/star/script/XInvocation.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/script/InvocationInfo.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace script {

class SAL_NO_VTABLE XInvocation2 : public ::com::sun::star::script::XInvocation
{
public:

    // Methods
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getMemberNames(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::script::InvocationInfo > SAL_CALL getInfo(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::script::InvocationInfo SAL_CALL getInfoForName( const ::rtl::OUString& aName, ::sal_Bool bExact ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::script::XInvocation2 >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_SCRIPT_XINVOCATION2_HDL
