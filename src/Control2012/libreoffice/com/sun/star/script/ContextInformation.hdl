#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_CONTEXTINFORMATION_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_CONTEXTINFORMATION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace script {

#ifdef SAL_W32
#   pragma pack(push, 8)
#elif defined(SAL_OS2)
#   pragma pack(8)
#endif

struct ContextInformation {
    inline ContextInformation() SAL_THROW(());

    inline ContextInformation(const ::rtl::OUString& Name_, const ::rtl::OUString& SourceCode_, const ::sal_Int32& StartLine_, const ::sal_Int32& StartColumn_, const ::sal_Int32& EndLine_, const ::sal_Int32& EndColumn_, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& LocalVariableNames_) SAL_THROW(());

    ::rtl::OUString Name;
    ::rtl::OUString SourceCode;
    ::sal_Int32 StartLine;
    ::sal_Int32 StartColumn;
    ::sal_Int32 EndLine;
    ::sal_Int32 EndColumn;
    ::com::sun::star::uno::Sequence< ::rtl::OUString > LocalVariableNames;
};

#ifdef SAL_W32
#   pragma pack(pop)
#elif defined(SAL_OS2)
#   pragma pack()
#endif

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::script::ContextInformation* );

#endif // INCLUDED_COM_SUN_STAR_SCRIPT_CONTEXTINFORMATION_HDL
