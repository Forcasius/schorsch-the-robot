#ifndef INCLUDED_COM_SUN_STAR_TEXT_XAUTOTEXTGROUP_HDL
#define INCLUDED_COM_SUN_STAR_TEXT_XAUTOTEXTGROUP_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace text { class XTextRange; } } } }
#include "com/sun/star/container/NoSuchElementException.hdl"
namespace com { namespace sun { namespace star { namespace text { class XAutoTextEntry; } } } }
#include "com/sun/star/io/IOException.hdl"
#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/container/ElementExistException.hdl"
#include "com/sun/star/container/XNameAccess.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace text {

class SAL_NO_VTABLE XAutoTextGroup : public ::com::sun::star::container::XNameAccess
{
public:

    // Methods
    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getTitles(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL renameByName( const ::rtl::OUString& aElementName, const ::rtl::OUString& aNewElementName, const ::rtl::OUString& aNewElementTitle ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::container::ElementExistException, ::com::sun::star::io::IOException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::text::XAutoTextEntry > SAL_CALL insertNewByName( const ::rtl::OUString& aName, const ::rtl::OUString& aTitle, const ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange >& xTextRange ) throw (::com::sun::star::container::ElementExistException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeByName( const ::rtl::OUString& aEntryName ) throw (::com::sun::star::container::NoSuchElementException, ::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::text::XAutoTextGroup >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_TEXT_XAUTOTEXTGROUP_HDL
