#ifndef INCLUDED_COM_SUN_STAR_TEXT_XFLATPARAGRAPH_HDL
#define INCLUDED_COM_SUN_STAR_TEXT_XFLATPARAGRAPH_HDL

#include "sal/config.h"

#include "com/sun/star/lang/IllegalArgumentException.hdl"
#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/text/XTextMarkup.hdl"
#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace text {

class SAL_NO_VTABLE XFlatParagraph : public ::com::sun::star::text::XTextMarkup
{
public:

    // Methods
    virtual ::rtl::OUString SAL_CALL getText(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isModified(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setChecked( ::sal_Int32 nType, ::sal_Bool bVal ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isChecked( ::sal_Int32 nType ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::lang::Locale SAL_CALL getLanguageOfText( ::sal_Int32 nPos, ::sal_Int32 nLen ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::lang::Locale SAL_CALL getPrimaryLanguageOfText( ::sal_Int32 nPos, ::sal_Int32 nLen ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL changeText( ::sal_Int32 nPos, ::sal_Int32 nLen, const ::rtl::OUString& aNewText, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aAttributes ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL changeAttributes( ::sal_Int32 nPos, ::sal_Int32 nLen, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& aAttributes ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::sal_Int32 > SAL_CALL getLanguagePortions(  ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::text::XFlatParagraph >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_TEXT_XFLATPARAGRAPH_HDL
