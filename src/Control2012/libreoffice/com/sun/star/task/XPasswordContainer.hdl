#ifndef INCLUDED_COM_SUN_STAR_TASK_XPASSWORDCONTAINER_HDL
#define INCLUDED_COM_SUN_STAR_TASK_XPASSWORDCONTAINER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace task { class XInteractionHandler; } } } }
#include "com/sun/star/task/UrlRecord.hdl"
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace task {

class SAL_NO_VTABLE XPasswordContainer : public ::com::sun::star::uno::XInterface
{
public:

    // Methods
    virtual void SAL_CALL add( const ::rtl::OUString& Url, const ::rtl::OUString& UserName, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& Passwords, const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionHandler >& Handler ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL addPersistent( const ::rtl::OUString& Url, const ::rtl::OUString& UserName, const ::com::sun::star::uno::Sequence< ::rtl::OUString >& Passwords, const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionHandler >& Handler ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::task::UrlRecord SAL_CALL find( const ::rtl::OUString& Url, const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionHandler >& Handler ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::task::UrlRecord SAL_CALL findForName( const ::rtl::OUString& Url, const ::rtl::OUString& UserName, const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionHandler >& Handler ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL remove( const ::rtl::OUString& Url, const ::rtl::OUString& UserName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removePersistent( const ::rtl::OUString& Url, const ::rtl::OUString& UserName ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL removeAllPersistent(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::task::UrlRecord > SAL_CALL getAllPersistent( const ::com::sun::star::uno::Reference< ::com::sun::star::task::XInteractionHandler >& Handler ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::task::XPasswordContainer >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_TASK_XPASSWORDCONTAINER_HDL
