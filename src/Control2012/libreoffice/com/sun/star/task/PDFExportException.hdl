#ifndef INCLUDED_COM_SUN_STAR_TASK_PDFEXPORTEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_TASK_PDFEXPORTEXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Exception.hdl"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace task {

class CPPU_GCC_DLLPUBLIC_EXPORT PDFExportException : public ::com::sun::star::uno::Exception
{
public:
    inline CPPU_GCC_DLLPRIVATE PDFExportException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE PDFExportException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::uno::Sequence< ::sal_Int32 >& ErrorCodes_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE PDFExportException(PDFExportException const &);

    inline CPPU_GCC_DLLPRIVATE ~PDFExportException();

    inline CPPU_GCC_DLLPRIVATE PDFExportException & operator =(PDFExportException const &);

    ::com::sun::star::uno::Sequence< ::sal_Int32 > ErrorCodes CPPU_GCC3_ALIGN( ::com::sun::star::uno::Exception );
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::task::PDFExportException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_TASK_PDFEXPORTEXCEPTION_HDL
