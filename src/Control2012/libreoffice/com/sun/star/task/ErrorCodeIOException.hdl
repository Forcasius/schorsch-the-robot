#ifndef INCLUDED_COM_SUN_STAR_TASK_ERRORCODEIOEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_TASK_ERRORCODEIOEXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/io/IOException.hdl"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace task {

class CPPU_GCC_DLLPUBLIC_EXPORT ErrorCodeIOException : public ::com::sun::star::io::IOException
{
public:
    inline CPPU_GCC_DLLPRIVATE ErrorCodeIOException() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE ErrorCodeIOException(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::sal_Int32& ErrCode_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE ErrorCodeIOException(ErrorCodeIOException const &);

    inline CPPU_GCC_DLLPRIVATE ~ErrorCodeIOException();

    inline CPPU_GCC_DLLPRIVATE ErrorCodeIOException & operator =(ErrorCodeIOException const &);

    ::sal_Int32 ErrCode CPPU_GCC3_ALIGN( ::com::sun::star::io::IOException );
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::task::ErrorCodeIOException* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_TASK_ERRORCODEIOEXCEPTION_HDL
