#ifndef INCLUDED_COM_SUN_STAR_TASK_DOCUMENTPASSWORDREQUEST_HDL
#define INCLUDED_COM_SUN_STAR_TASK_DOCUMENTPASSWORDREQUEST_HDL

#include "sal/config.h"

#include "com/sun/star/task/PasswordRequest.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace task {

class CPPU_GCC_DLLPUBLIC_EXPORT DocumentPasswordRequest : public ::com::sun::star::task::PasswordRequest
{
public:
    inline CPPU_GCC_DLLPRIVATE DocumentPasswordRequest() SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE DocumentPasswordRequest(const ::rtl::OUString& Message_, const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >& Context_, const ::com::sun::star::task::InteractionClassification& Classification_, const ::com::sun::star::task::PasswordRequestMode& Mode_, const ::rtl::OUString& Name_) SAL_THROW( () );

    inline CPPU_GCC_DLLPRIVATE DocumentPasswordRequest(DocumentPasswordRequest const &);

    inline CPPU_GCC_DLLPRIVATE ~DocumentPasswordRequest();

    inline CPPU_GCC_DLLPRIVATE DocumentPasswordRequest & operator =(DocumentPasswordRequest const &);

    ::rtl::OUString Name CPPU_GCC3_ALIGN( ::com::sun::star::task::PasswordRequest );
};

} } } }

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::task::DocumentPasswordRequest* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_TASK_DOCUMENTPASSWORDREQUEST_HDL
