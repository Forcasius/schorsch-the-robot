#ifndef INCLUDED_COM_SUN_STAR_LINGUISTIC2_XDICTIONARY1_HDL
#define INCLUDED_COM_SUN_STAR_LINGUISTIC2_XDICTIONARY1_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace linguistic2 { class XDictionaryEventListener; } } } }
#include "com/sun/star/uno/RuntimeException.hdl"
#include "com/sun/star/linguistic2/DictionaryType.hdl"
namespace com { namespace sun { namespace star { namespace linguistic2 { class XDictionaryEntry; } } } }
#include "com/sun/star/container/XNamed.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno {
class Type;
} } } }

namespace com { namespace sun { namespace star { namespace linguistic2 {

class SAL_NO_VTABLE XDictionary1 : public ::com::sun::star::container::XNamed
{
public:

    // Methods
    virtual ::com::sun::star::linguistic2::DictionaryType SAL_CALL getDictionaryType(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setActive( ::sal_Bool bActivate ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isActive(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getCount(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Int16 SAL_CALL getLanguage(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL setLanguage( ::sal_Int16 nLang ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XDictionaryEntry > SAL_CALL getEntry( const ::rtl::OUString& aWord ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL addEntry( const ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XDictionaryEntry >& xDicEntry ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL add( const ::rtl::OUString& aWord, ::sal_Bool bIsNegative, const ::rtl::OUString& aRplcText ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL remove( const ::rtl::OUString& aWord ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL isFull(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XDictionaryEntry > > SAL_CALL getEntries(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual void SAL_CALL clear(  ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL addDictionaryEventListener( const ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XDictionaryEventListener >& xListener ) throw (::com::sun::star::uno::RuntimeException) = 0;
    virtual ::sal_Bool SAL_CALL removeDictionaryEventListener( const ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XDictionaryEventListener >& xListener ) throw (::com::sun::star::uno::RuntimeException) = 0;

    static inline ::com::sun::star::uno::Type const & SAL_CALL static_type(void * = 0);
};

} } } }

inline const ::com::sun::star::uno::Type& SAL_CALL getCppuType( const ::com::sun::star::uno::Reference< ::com::sun::star::linguistic2::XDictionary1 >* ) SAL_THROW( () );

#endif // INCLUDED_COM_SUN_STAR_LINGUISTIC2_XDICTIONARY1_HDL
